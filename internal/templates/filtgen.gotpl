// Code generated by filtgen{{version -}}; DO NOT EDIT.
//
// See here for more information on filtgen: https://github.com/miyamo2/filtgen
package {{.Package}}

import (
{{- range $imp := .Imports}}
{{"\t"}}{{importToPath $imp -}}
{{- end}}
)
{{ range $strct := .Structs }}
// {{.Name}}Slice is a defined-type of []User.
// If a filter is to be performed, a cast to this type is necessary.
//
// Example:
//
//  {{.Name}}Slice([]{{.Name}}{}).FooEq("bar").
type {{.Name}}Slice []{{.Name}}

// {{.Name}}Map is a defined-type of []{{.Name}}.
// If a filter is to be performed, a cast to this type is necessary.
//
// Example:
//
//  {{.Name}}Map(map[string]{{.Name}}{}).FooEq("bar").
type {{.Name}}Map[T comparable] map[T]{{.Name}}

// {{.Name}}Seq is a defined-type of iter.Seq[{{.Name}}].
// If a filter is to be performed, a cast to this type is necessary.
//
// Example:
//
//  {{.Name}}Seq(iter.Seq[{{.Name}}](nil)).FooEq("bar").
type {{.Name}}Seq iter.Seq[{{.Name}}]

// {{.Name}}Seq2 is a defined-type of iter.Seq2[T any, {{.Name}}].
// If a filter is to be performed, a cast to this type is necessary.
//
// Example:
//
//  {{.Name}}Seq2(iter.Seq2[string, {{.Name}}](nil)).FooEq("bar").
type {{.Name}}Seq2[T any] iter.Seq2[T, {{.Name}}]
{{ range $field := $strct.Fields }}
{{- if eq $field.Type "string" -}}
{{- if $field.Eq }}
// {{$field.Name}}Eq filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}Eq("foo")
func (s {{$strct.Name}}Slice) {{$field.Name}}Eq(str string) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if strings.Compare(v.{{$field.Name}}, str) == 0 && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Eq filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}Eq("foo")
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Eq(str string) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if strings.Compare(v.{{$field.Name}}, str) == 0 && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Eq filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}Eq("foo")
func (s {{$strct.Name}}Seq) {{$field.Name}}Eq(str string) iter.Seq[{{$strct.Name}}] {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if strings.Compare(v.{{$field.Name}}, str) == 0 && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Eq filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}Eq("foo")
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Eq(str string) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if strings.Compare(v.{{$field.Name}}, str) == 0 && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Eq */}}
{{- if $field.Ne }}
// {{$field.Name}}Ne filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is not equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}Ne("foo")
func (s {{$strct.Name}}Slice) {{$field.Name}}Ne(str string) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if strings.Compare(v.{{$field.Name}}, str) != 0 && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Ne filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is not equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}Ne("foo")
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Ne(str string) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if strings.Compare(v.{{$field.Name}}, str) != 0 && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Ne filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is not equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}Ne("foo")
func (s {{$strct.Name}}Seq) {{$field.Name}}Ne(str string) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if strings.Compare(v.{{$field.Name}}, str) != 0 && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Ne filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is not equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}Ne("foo")
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Ne(str string) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if strings.Compare(v.{{$field.Name}}, str) != 0 && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Ne */}}
{{- if $field.Gt }}
// {{$field.Name}}Gt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is greater than the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}Gt("foo")
func (s {{$strct.Name}}Slice) {{$field.Name}}Gt(str string) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if strings.Compare(v.{{$field.Name}}, str) == 1 && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Gt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is greater than the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}Gt("foo")
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Gt(str string) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if strings.Compare(v.{{$field.Name}}, str) == 1 && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Gt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is greater than the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}Gt("foo")
func (s {{$strct.Name}}Seq) {{$field.Name}}Gt(str string) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if strings.Compare(v.{{$field.Name}}, str) == 1 && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Gt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is greater than the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}Gt("foo")
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Gt(str string) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if strings.Compare(v.{{$field.Name}}, str) == 1 && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Gt */}}
{{- if $field.Lt }}
// {{$field.Name}}Lt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is less than the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}Lt("foo")
func (s {{$strct.Name}}Slice) {{$field.Name}}Lt(str string) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if strings.Compare(v.{{$field.Name}}, str) == -1 && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Lt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is less than the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}Lt("foo")
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Lt(str string) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if strings.Compare(v.{{$field.Name}}, str) == -1 && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Lt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is less than the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}Lt("foo")
func (s {{$strct.Name}}Seq) {{$field.Name}}Lt(str string) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if strings.Compare(v.{{$field.Name}}, str) == -1 && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Lt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is less than the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}Lt("foo")
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Lt(str string) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if strings.Compare(v.{{$field.Name}}, str) == -1 && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Lt */}}
{{- if $field.Ge }}
// {{$field.Name}}Ge filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}Ge("foo")
func (s {{$strct.Name}}Slice) {{$field.Name}}Ge(str string) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if strings.Compare(v.{{$field.Name}}, str) >= 0 && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Ge filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}Ge("foo")
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Ge(str string) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if strings.Compare(v.{{$field.Name}}, str) >= 0 && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Ge filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}Ge("foo")
func (s {{$strct.Name}}Seq) {{$field.Name}}Ge(str string) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if strings.Compare(v.{{$field.Name}}, str) >= 0 && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Ge filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}Ge("foo")
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Ge(str string) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if strings.Compare(v.{{$field.Name}}, str) >= 0 && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Ge */}}
{{- if $field.Le }}
// {{$field.Name}}Le filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}Le("foo")
func (s {{$strct.Name}}Slice) {{$field.Name}}Le(str string) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if strings.Compare(v.{{$field.Name}}, str) <= 0 && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Le filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}Le("foo")
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Le(str string) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if strings.Compare(v.{{$field.Name}}, str) <= 0 && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Le filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}Le("foo")
func (s {{$strct.Name}}Seq) {{$field.Name}}Le(str string) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if strings.Compare(v.{{$field.Name}}, str) <= 0 && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Le filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}Le("foo")
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Le(str string) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if strings.Compare(v.{{$field.Name}}, str) <= 0 && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Le */}}
{{- if $field.Matches }}
// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}(func(str string) bool { return strings.Contains(str, "foo") })
func (s {{$strct.Name}}Slice) {{$field.Name}}Matches(matcher func(string) bool) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}(func(str string) bool { return strings.Contains(str, "foo") })
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Matches(matcher func(string) bool) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}(func(str string) bool { return strings.Contains(str, "foo") })
func (s {{$strct.Name}}Seq) {{$field.Name}}Matches(matcher func(string) bool) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if matcher(v.{{$field.Name}}) && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}(func(str string) bool { return strings.Contains(str, "foo") })
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Matches(matcher func(string) bool) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Matches */}}
{{- continue -}}
{{- end -}} {{/* end: string type */}}
{{- if or (eq $field.Type "uint") (eq $field.Type "uint8") (eq $field.Type "uint16") (eq $field.Type "uint32") (eq $field.Type "uint64") (eq $field.Type "int") (eq $field.Type "int8") (eq $field.Type "int16") (eq $field.Type "int32") (eq $field.Type "int64") (eq $field.Type "float32") (eq $field.Type "float64") (eq $field.Type "rune") (eq $field.Type "byte") (eq $field.Type "uintptr") }}
{{- if $field.Eq }}
// {{$field.Name}}Eq filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}Eq(1)
func (s {{$strct.Name}}Slice) {{$field.Name}}Eq(val {{$field.Type}}) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if v.{{$field.Name}} == val && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Eq filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}Eq(1)
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Eq(val {{$field.Type}}) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if v.{{$field.Name}} == val && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Eq filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}Eq(1)
func (s {{$strct.Name}}Seq) {{$field.Name}}Eq(val {{$field.Type}}) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if v.{{$field.Name}} == val && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Eq filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}Eq(1)
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Eq(val {{$field.Type}}) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if v.{{$field.Name}} == val && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Eq */}}
{{- if $field.Ne }}
// {{$field.Name}}Ne filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is not equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}Ne(1)
func (s {{$strct.Name}}Slice) {{$field.Name}}Ne(val {{$field.Type}}) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if v.{{$field.Name}} != val && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Ne filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is not equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}Ne(1)
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Ne(val {{$field.Type}}) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if v.{{$field.Name}} != val && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Ne filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is not equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}Ne(1)
func (s {{$strct.Name}}Seq) {{$field.Name}}Ne(val {{$field.Type}}) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if v.{{$field.Name}} != val && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Ne filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is not equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}Ne(1)
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Ne(val {{$field.Type}}) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if v.{{$field.Name}} != val && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Ne */}}
{{- if $field.Gt }}
// {{$field.Name}}Gt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is greater than the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}Gt(1)
func (s {{$strct.Name}}Slice) {{$field.Name}}Gt(val {{$field.Type}}) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if v.{{$field.Name}} > val && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Gt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is greater than the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}Gt(1)
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Gt(val {{$field.Type}}) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if v.{{$field.Name}} > val && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Gt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is greater than the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}Gt(1)
func (s {{$strct.Name}}Seq) {{$field.Name}}Gt(val {{$field.Type}}) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if v.{{$field.Name}} > val && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Gt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is greater than the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}Gt(1)
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Gt(val {{$field.Type}}) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if v.{{$field.Name}} > val && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Gt */}}
{{- if $field.Lt }}
// {{$field.Name}}Lt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is less than the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}Lt(1)
func (s {{$strct.Name}}Slice) {{$field.Name}}Lt(val {{$field.Type}}) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if v.{{$field.Name}} < val && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Lt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is less than the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}Lt(1)
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Lt(val {{$field.Type}}) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if v.{{$field.Name}} < val && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Lt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is less than the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}Lt(1)
func (s {{$strct.Name}}Seq) {{$field.Name}}Lt(val {{$field.Type}}) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if v.{{$field.Name}} < val && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Lt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is less than the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}Lt(1)
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Lt(val {{$field.Type}}) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if v.{{$field.Name}} < val && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Lt */}}
{{- if $field.Ge }}
// {{$field.Name}}Ge filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}Ge(1)
func (s {{$strct.Name}}Slice) {{$field.Name}}Ge(val {{$field.Type}}) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if v.{{$field.Name}} >= val && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Ge filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}Ge(1)
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Ge(val {{$field.Type}}) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if v.{{$field.Name}} >= val && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Ge filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}Ge(1)
func (s {{$strct.Name}}Seq) {{$field.Name}}Ge(val {{$field.Type}}) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if v.{{$field.Name}} >= val && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Ge filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}Ge(1)
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Ge(val {{$field.Type}}) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if v.{{$field.Name}} >= val && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Ge */}}
{{- if $field.Le }}
// {{$field.Name}}Le filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}Le(1)
func (s {{$strct.Name}}Slice) {{$field.Name}}Le(val {{$field.Type}}) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if v.{{$field.Name}} <= val && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Le filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}Le(1)
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Le(val {{$field.Type}}) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if v.{{$field.Name}} <= val && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Le filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}Le(1)
func (s {{$strct.Name}}Seq) {{$field.Name}}Le(val {{$field.Type}}) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if v.{{$field.Name}} <= val && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Le filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}Le(1)
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Le(val {{$field.Type}}) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if v.{{$field.Name}} <= val && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Le */}}
{{- if $field.Matches }}
// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}(func(val {{$field.Type}}) bool { return i % 2 == 0 })
func (s {{$strct.Name}}Slice) {{$field.Name}}Matches(matcher func({{$field.Type}}) bool) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}(func(val {{$field.Type}}) bool { return i % 2 == 0 })
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Matches(matcher func({{$field.Type}}) bool) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}(func(val {{$field.Type}}) bool { return i % 2 == 0 })
func (s {{$strct.Name}}Seq) {{$field.Name}}Matches(matcher func({{$field.Type}}) bool) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if matcher(v.{{$field.Name}}) && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}(func(val {{$field.Type}}) bool { return i % 2 == 0 })
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Matches(matcher func({{$field.Type}}) bool) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}
{{ end -}} {{/* end: if $field.Matches */}}
{{- continue -}}
{{- end -}} {{/* end: comparable-types */}}
{{- if eq $field.Type "bool" -}}
{{- if $field.Eq }}
// {{$field.Name}}Eq filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}Eq(true)
func (s {{$strct.Name}}Slice) {{$field.Name}}Eq(b bool) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if v.{{$field.Name}} == b && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Eq filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}Eq(true)
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Eq(b bool) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if v.{{$field.Name}} == b && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Eq filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}Eq(true)
func (s {{$strct.Name}}Seq) {{$field.Name}}Eq(b bool) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if v.{{$field.Name}} == b && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Eq filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}Eq(true)
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Eq(b bool) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if v.{{$field.Name}} == b && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Eq */}}
{{- if $field.Ne }}
// {{$field.Name}}Ne filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is not equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}Ne(true)
func (s {{$strct.Name}}Slice) {{$field.Name}}Ne(b bool) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if v.{{$field.Name}} != b && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Ne filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is not equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}Ne(true)
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Ne(b bool) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if v.{{$field.Name}} != b && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Ne filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is not equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}Ne(true)
func (s {{$strct.Name}}Seq) {{$field.Name}}Ne(b bool) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if v.{{$field.Name}} != b && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Ne filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] is not equal to the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}Ne(true)
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Ne(b bool) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if v.{{$field.Name}} != b && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Ne */}}
{{- if $field.Matches }}
// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}(func(b bool) bool { return b })
func (s {{$strct.Name}}Slice) {{$field.Name}}Matches(matcher func(bool) bool) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}(func(b bool) bool { return b })
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Matches(matcher func(bool) bool) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}(func(b bool) bool { return b })
func (s {{$strct.Name}}Seq) {{$field.Name}}Matches(matcher func(bool) bool) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if matcher(v.{{$field.Name}}) && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}(func(b bool) bool { return b })
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Matches(matcher func(bool) bool) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Matches */}}
{{- continue -}}
{{- end -}} {{/* end: bool type */}}
{{- if eq $field.Type "error" -}} {{/* error types */}}
{{- if $field.Is }}
// {{$field.Name}}Is filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] returns true in [errors.Is].
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}Is(io.EOF)
func (s {{$strct.Name}}Slice) {{$field.Name}}Is(err error) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if errors.Is(v.{{$field.Name}}, err) && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Is filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] returns true in [errors.Is].
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}Is(io.EOF)
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Is(err error) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if errors.Is(v.{{$field.Name}}, err) && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Is filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] returns true in [errors.Is].
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}Is(io.EOF)
func (s {{$strct.Name}}Seq) {{$field.Name}}Is(err error) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if errors.Is(v.{{$field.Name}}, err) && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Is filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] returns true in [errors.Is].
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}Is(io.EOF)
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Is(err error) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if errors.Is(v.{{$field.Name}}, err) && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Is */}}
{{- if $field.Isnt }}
// {{$field.Name}}Isnt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] returns false in [errors.Is].
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}Isnt(io.EOF)
func (s {{$strct.Name}}Slice) {{$field.Name}}Isnt(err error) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if !errors.Is(v.{{$field.Name}}, err) && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Isnt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] returns false in [errors.Is].
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}Isnt(io.EOF)
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Isnt(err error) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if !errors.Is(v.{{$field.Name}}, err) && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Isnt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] returns false in [errors.Is].
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}Isnt(io.EOF)
func (s {{$strct.Name}}Seq) {{$field.Name}}Isnt(err error) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if !errors.Is(v.{{$field.Name}}, err) && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Isnt filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] returns false in [errors.Is].
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}Isnt(io.EOF)
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Isnt(err error) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if !errors.Is(v.{{$field.Name}}, err) && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Isnt */}}
{{- if $field.Matches }}
// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}(func(e error) bool { return true })
func (s {{$strct.Name}}Slice) {{$field.Name}}Matches(matcher func(error) bool) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}(func(e error) bool { return true })
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Matches(matcher func(error) bool) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}(func(e error) bool { return true })
func (s {{$strct.Name}}Seq) {{$field.Name}}Matches(matcher func(error) bool) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if matcher(v.{{$field.Name}}) && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}(func(e error) bool { return true })
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Matches(matcher func(error) bool) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Matches */}}
{{- continue -}}{{- end -}} {{/* end: error type */}}
{{- if eq $field.Package "" -}} {{/* other types(built-in) */}}
{{- if $field.Matches -}}
// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}(func(v {{$field.Type}}) bool { return true })
func (s {{$strct.Name}}Slice) {{$field.Name}}Matches(matcher func({{$field.Type}}) bool) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}(func(v {{$field.Type}}) bool { return true })
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Matches(matcher func({{$field.Type}}) bool) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}(func(v {{$field.Type}}) bool { return true })
func (s {{$strct.Name}}Seq) {{$field.Name}}Matches(matcher func({{$field.Type}}) bool) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if matcher(v.{{$field.Name}}) && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}(func(v {{$field.Type}}) bool { return true })
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Matches(matcher func({{$field.Type}}) bool) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}
{{ end }}{{/* end: if $field.Matches */}}
{{- continue -}}
{{- end -}} {{/* end: other types(built-in) */}}
{{- if $field.Matches -}}{{/* other types */}}
{{- $typeName := joinPackageNameAndTypeName $field.Package $field.Type -}}
// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Slice.{{$field.Name}}(func(v {{$typeName}}) bool { return true })
func (s {{$strct.Name}}Slice) {{$field.Name}}Matches(matcher func({{$typeName}}) bool) {{$strct.Name}}Seq2[int] {
    return func(yield func(int, {{$strct.Name}}) bool) {
        for k, v := range s {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Map.{{$field.Name}}(func(v {{$typeName}}) bool { return true })
func (m {{$strct.Name}}Map[T]) {{$field.Name}}Matches(matcher func({{$typeName}}) bool) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range m {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq.{{$field.Name}}(func(v {{$typeName}}) bool { return true })
func (s {{$strct.Name}}Seq) {{$field.Name}}Matches(matcher func({{$typeName}}) bool) {{$strct.Name}}Seq {
    return func(yield func({{$strct.Name}}) bool) {
        for v := range s {
            if matcher(v.{{$field.Name}}) && !yield(v) {
                break
            }
        }
    }
}

// {{$field.Name}}Matches filters the iterator items to [{{$strct.Name}}] whose [{{$strct.Name}}.{{$field.Name}}] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range {{toLowerCamel $strct.Name}}Seq2.{{$field.Name}}(func(v {{$typeName}}) bool { return true })
func (s {{$strct.Name}}Seq2[T]) {{$field.Name}}Matches(matcher func({{$typeName}}) bool) {{$strct.Name}}Seq2[T] {
    return func(yield func(T, {{$strct.Name}}) bool) {
        for k, v := range s {
            if matcher(v.{{$field.Name}}) && !yield(k, v) {
                break
            }
        }
    }
}
{{ end -}}{{/* end: if $field.Matches */}}
{{- end -}}{{/* end: range $field := .Fields */}}
{{- end -}}{{/* end: range $strct := .Structs */}}
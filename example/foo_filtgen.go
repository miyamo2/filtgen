// Code generated by filtgen; DO NOT EDIT.
package main

import (
	"iter"
	"strings"
	"errors"
	"github.com/miyamo2/filtgen-example/pkg/bar"
	"time"
	s "database/sql"
)

// FooSlice is a defined-type of []User.
// If a filter is to be performed, a cast to this type is necessary.
//
// Example:
//
//  FooSlice([]Foo{}).FooEq("bar").
type FooSlice []Foo

// FooMap is a defined-type of []Foo.
// If a filter is to be performed, a cast to this type is necessary.
//
// Example:
//
//  FooMap(map[string]Foo{}).FooEq("bar").
type FooMap[T comparable] map[T]Foo

// FooSeq is a defined-type of iter.Seq[Foo].
// If a filter is to be performed, a cast to this type is necessary.
//
// Example:
//
//  FooSeq(iter.Seq[Foo](nil)).FooEq("bar").
type FooSeq iter.Seq[Foo]

// FooSeq2 is a defined-type of iter.Seq2[T any, Foo].
// If a filter is to be performed, a cast to this type is necessary.
//
// Example:
//
//  FooSeq2(iter.Seq2[string, Foo](nil)).FooEq("bar").
type FooSeq2[T any] iter.Seq2[T, Foo]

// StringEq filters the iterator items to [Foo] whose [Foo.String] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.StringEq("foo")
func (s FooSlice) StringEq(str string) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if strings.Compare(v.String, str) == 0 && !yield(k, v) {
                break
            }
        }
    }
}

// StringEq filters the iterator items to [Foo] whose [Foo.String] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.StringEq("foo")
func (m FooMap[T]) StringEq(str string) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if strings.Compare(v.String, str) == 0 && !yield(k, v) {
                break
            }
        }
    }
}

// StringEq filters the iterator items to [Foo] whose [Foo.String] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.StringEq("foo")
func (s FooSeq) StringEq(str string) iter.Seq[Foo] {
    return func(yield func(Foo) bool) {
        for v := range s {
            if strings.Compare(v.String, str) == 0 && !yield(v) {
                break
            }
        }
    }
}

// StringEq filters the iterator items to [Foo] whose [Foo.String] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.StringEq("foo")
func (s FooSeq2[T]) StringEq(str string) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if strings.Compare(v.String, str) == 0 && !yield(k, v) {
                break
            }
        }
    }
}

// StringNe filters the iterator items to [Foo] whose [Foo.String] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.StringNe("foo")
func (s FooSlice) StringNe(str string) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if strings.Compare(v.String, str) != 0 && !yield(k, v) {
                break
            }
        }
    }
}

// StringNe filters the iterator items to [Foo] whose [Foo.String] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.StringNe("foo")
func (m FooMap[T]) StringNe(str string) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if strings.Compare(v.String, str) != 0 && !yield(k, v) {
                break
            }
        }
    }
}

// StringNe filters the iterator items to [Foo] whose [Foo.String] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.StringNe("foo")
func (s FooSeq) StringNe(str string) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if strings.Compare(v.String, str) != 0 && !yield(v) {
                break
            }
        }
    }
}

// StringNe filters the iterator items to [Foo] whose [Foo.String] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.StringNe("foo")
func (s FooSeq2[T]) StringNe(str string) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if strings.Compare(v.String, str) != 0 && !yield(k, v) {
                break
            }
        }
    }
}

// StringGt filters the iterator items to [Foo] whose [Foo.String] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.StringGt("foo")
func (s FooSlice) StringGt(str string) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if strings.Compare(v.String, str) == 1 && !yield(k, v) {
                break
            }
        }
    }
}

// StringGt filters the iterator items to [Foo] whose [Foo.String] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooMap.StringGt("foo")
func (m FooMap[T]) StringGt(str string) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if strings.Compare(v.String, str) == 1 && !yield(k, v) {
                break
            }
        }
    }
}

// StringGt filters the iterator items to [Foo] whose [Foo.String] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.StringGt("foo")
func (s FooSeq) StringGt(str string) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if strings.Compare(v.String, str) == 1 && !yield(v) {
                break
            }
        }
    }
}

// StringGt filters the iterator items to [Foo] whose [Foo.String] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.StringGt("foo")
func (s FooSeq2[T]) StringGt(str string) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if strings.Compare(v.String, str) == 1 && !yield(k, v) {
                break
            }
        }
    }
}

// StringLt filters the iterator items to [Foo] whose [Foo.String] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.StringLt("foo")
func (s FooSlice) StringLt(str string) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if strings.Compare(v.String, str) == -1 && !yield(k, v) {
                break
            }
        }
    }
}

// StringLt filters the iterator items to [Foo] whose [Foo.String] is less than the argument.
//
// Example:
//
// 	for k, v := range fooMap.StringLt("foo")
func (m FooMap[T]) StringLt(str string) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if strings.Compare(v.String, str) == -1 && !yield(k, v) {
                break
            }
        }
    }
}

// StringLt filters the iterator items to [Foo] whose [Foo.String] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.StringLt("foo")
func (s FooSeq) StringLt(str string) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if strings.Compare(v.String, str) == -1 && !yield(v) {
                break
            }
        }
    }
}

// StringLt filters the iterator items to [Foo] whose [Foo.String] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.StringLt("foo")
func (s FooSeq2[T]) StringLt(str string) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if strings.Compare(v.String, str) == -1 && !yield(k, v) {
                break
            }
        }
    }
}

// StringGe filters the iterator items to [Foo] whose [Foo.String] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.StringGe("foo")
func (s FooSlice) StringGe(str string) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if strings.Compare(v.String, str) >= 0 && !yield(k, v) {
                break
            }
        }
    }
}

// StringGe filters the iterator items to [Foo] whose [Foo.String] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.StringGe("foo")
func (m FooMap[T]) StringGe(str string) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if strings.Compare(v.String, str) >= 0 && !yield(k, v) {
                break
            }
        }
    }
}

// StringGe filters the iterator items to [Foo] whose [Foo.String] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.StringGe("foo")
func (s FooSeq) StringGe(str string) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if strings.Compare(v.String, str) >= 0 && !yield(v) {
                break
            }
        }
    }
}

// StringGe filters the iterator items to [Foo] whose [Foo.String] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.StringGe("foo")
func (s FooSeq2[T]) StringGe(str string) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if strings.Compare(v.String, str) >= 0 && !yield(k, v) {
                break
            }
        }
    }
}

// StringLe filters the iterator items to [Foo] whose [Foo.String] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.StringLe("foo")
func (s FooSlice) StringLe(str string) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if strings.Compare(v.String, str) <= 0 && !yield(k, v) {
                break
            }
        }
    }
}

// StringLe filters the iterator items to [Foo] whose [Foo.String] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.StringLe("foo")
func (m FooMap[T]) StringLe(str string) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if strings.Compare(v.String, str) <= 0 && !yield(k, v) {
                break
            }
        }
    }
}

// StringLe filters the iterator items to [Foo] whose [Foo.String] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.StringLe("foo")
func (s FooSeq) StringLe(str string) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if strings.Compare(v.String, str) <= 0 && !yield(v) {
                break
            }
        }
    }
}

// StringLe filters the iterator items to [Foo] whose [Foo.String] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.StringLe("foo")
func (s FooSeq2[T]) StringLe(str string) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if strings.Compare(v.String, str) <= 0 && !yield(k, v) {
                break
            }
        }
    }
}

// StringMatches filters the iterator items to [Foo] whose [Foo.String] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.String(func(str string) bool { return strings.Contains(str, "foo") })
func (s FooSlice) StringMatches(matcher func(string) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.String) && !yield(k, v) {
                break
            }
        }
    }
}

// StringMatches filters the iterator items to [Foo] whose [Foo.String] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.String(func(str string) bool { return strings.Contains(str, "foo") })
func (m FooMap[T]) StringMatches(matcher func(string) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.String) && !yield(k, v) {
                break
            }
        }
    }
}

// StringMatches filters the iterator items to [Foo] whose [Foo.String] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.String(func(str string) bool { return strings.Contains(str, "foo") })
func (s FooSeq) StringMatches(matcher func(string) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.String) && !yield(v) {
                break
            }
        }
    }
}

// StringMatches filters the iterator items to [Foo] whose [Foo.String] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.String(func(str string) bool { return strings.Contains(str, "foo") })
func (s FooSeq2[T]) StringMatches(matcher func(string) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.String) && !yield(k, v) {
                break
            }
        }
    }
}

// IntEq filters the iterator items to [Foo] whose [Foo.Int] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.IntEq(1)
func (s FooSlice) IntEq(val int) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int == val && !yield(k, v) {
                break
            }
        }
    }
}

// IntEq filters the iterator items to [Foo] whose [Foo.Int] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.IntEq(1)
func (m FooMap[T]) IntEq(val int) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int == val && !yield(k, v) {
                break
            }
        }
    }
}

// IntEq filters the iterator items to [Foo] whose [Foo.Int] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.IntEq(1)
func (s FooSeq) IntEq(val int) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int == val && !yield(v) {
                break
            }
        }
    }
}

// IntEq filters the iterator items to [Foo] whose [Foo.Int] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.IntEq(1)
func (s FooSeq2[T]) IntEq(val int) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int == val && !yield(k, v) {
                break
            }
        }
    }
}

// IntNe filters the iterator items to [Foo] whose [Foo.Int] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.IntNe(1)
func (s FooSlice) IntNe(val int) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int != val && !yield(k, v) {
                break
            }
        }
    }
}

// IntNe filters the iterator items to [Foo] whose [Foo.Int] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.IntNe(1)
func (m FooMap[T]) IntNe(val int) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int != val && !yield(k, v) {
                break
            }
        }
    }
}

// IntNe filters the iterator items to [Foo] whose [Foo.Int] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.IntNe(1)
func (s FooSeq) IntNe(val int) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int != val && !yield(v) {
                break
            }
        }
    }
}

// IntNe filters the iterator items to [Foo] whose [Foo.Int] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.IntNe(1)
func (s FooSeq2[T]) IntNe(val int) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int != val && !yield(k, v) {
                break
            }
        }
    }
}

// IntGt filters the iterator items to [Foo] whose [Foo.Int] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.IntGt(1)
func (s FooSlice) IntGt(val int) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int > val && !yield(k, v) {
                break
            }
        }
    }
}

// IntGt filters the iterator items to [Foo] whose [Foo.Int] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooMap.IntGt(1)
func (m FooMap[T]) IntGt(val int) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int > val && !yield(k, v) {
                break
            }
        }
    }
}

// IntGt filters the iterator items to [Foo] whose [Foo.Int] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.IntGt(1)
func (s FooSeq) IntGt(val int) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int > val && !yield(v) {
                break
            }
        }
    }
}

// IntGt filters the iterator items to [Foo] whose [Foo.Int] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.IntGt(1)
func (s FooSeq2[T]) IntGt(val int) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int > val && !yield(k, v) {
                break
            }
        }
    }
}

// IntLt filters the iterator items to [Foo] whose [Foo.Int] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.IntLt(1)
func (s FooSlice) IntLt(val int) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int < val && !yield(k, v) {
                break
            }
        }
    }
}

// IntLt filters the iterator items to [Foo] whose [Foo.Int] is less than the argument.
//
// Example:
//
// 	for k, v := range fooMap.IntLt(1)
func (m FooMap[T]) IntLt(val int) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int < val && !yield(k, v) {
                break
            }
        }
    }
}

// IntLt filters the iterator items to [Foo] whose [Foo.Int] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.IntLt(1)
func (s FooSeq) IntLt(val int) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int < val && !yield(v) {
                break
            }
        }
    }
}

// IntLt filters the iterator items to [Foo] whose [Foo.Int] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.IntLt(1)
func (s FooSeq2[T]) IntLt(val int) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int < val && !yield(k, v) {
                break
            }
        }
    }
}

// IntGe filters the iterator items to [Foo] whose [Foo.Int] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.IntGe(1)
func (s FooSlice) IntGe(val int) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int >= val && !yield(k, v) {
                break
            }
        }
    }
}

// IntGe filters the iterator items to [Foo] whose [Foo.Int] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.IntGe(1)
func (m FooMap[T]) IntGe(val int) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int >= val && !yield(k, v) {
                break
            }
        }
    }
}

// IntGe filters the iterator items to [Foo] whose [Foo.Int] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.IntGe(1)
func (s FooSeq) IntGe(val int) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int >= val && !yield(v) {
                break
            }
        }
    }
}

// IntGe filters the iterator items to [Foo] whose [Foo.Int] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.IntGe(1)
func (s FooSeq2[T]) IntGe(val int) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int >= val && !yield(k, v) {
                break
            }
        }
    }
}

// IntLe filters the iterator items to [Foo] whose [Foo.Int] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.IntLe(1)
func (s FooSlice) IntLe(val int) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int <= val && !yield(k, v) {
                break
            }
        }
    }
}

// IntLe filters the iterator items to [Foo] whose [Foo.Int] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.IntLe(1)
func (m FooMap[T]) IntLe(val int) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int <= val && !yield(k, v) {
                break
            }
        }
    }
}

// IntLe filters the iterator items to [Foo] whose [Foo.Int] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.IntLe(1)
func (s FooSeq) IntLe(val int) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int <= val && !yield(v) {
                break
            }
        }
    }
}

// IntLe filters the iterator items to [Foo] whose [Foo.Int] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.IntLe(1)
func (s FooSeq2[T]) IntLe(val int) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int <= val && !yield(k, v) {
                break
            }
        }
    }
}

// IntMatches filters the iterator items to [Foo] whose [Foo.Int] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int(func(val int) bool { return i % 2 == 0 })
func (s FooSlice) IntMatches(matcher func(int) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Int) && !yield(k, v) {
                break
            }
        }
    }
}

// IntMatches filters the iterator items to [Foo] whose [Foo.Int] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int(func(val int) bool { return i % 2 == 0 })
func (m FooMap[T]) IntMatches(matcher func(int) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Int) && !yield(k, v) {
                break
            }
        }
    }
}

// IntMatches filters the iterator items to [Foo] whose [Foo.Int] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int(func(val int) bool { return i % 2 == 0 })
func (s FooSeq) IntMatches(matcher func(int) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Int) && !yield(v) {
                break
            }
        }
    }
}

// IntMatches filters the iterator items to [Foo] whose [Foo.Int] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int(func(val int) bool { return i % 2 == 0 })
func (s FooSeq2[T]) IntMatches(matcher func(int) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Int) && !yield(k, v) {
                break
            }
        }
    }
}

// BoolEq filters the iterator items to [Foo] whose [Foo.Bool] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.BoolEq(true)
func (s FooSlice) BoolEq(b bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Bool == b && !yield(k, v) {
                break
            }
        }
    }
}

// BoolEq filters the iterator items to [Foo] whose [Foo.Bool] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.BoolEq(true)
func (m FooMap[T]) BoolEq(b bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Bool == b && !yield(k, v) {
                break
            }
        }
    }
}

// BoolEq filters the iterator items to [Foo] whose [Foo.Bool] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.BoolEq(true)
func (s FooSeq) BoolEq(b bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Bool == b && !yield(v) {
                break
            }
        }
    }
}

// BoolEq filters the iterator items to [Foo] whose [Foo.Bool] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.BoolEq(true)
func (s FooSeq2[T]) BoolEq(b bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Bool == b && !yield(k, v) {
                break
            }
        }
    }
}

// BoolNe filters the iterator items to [Foo] whose [Foo.Bool] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.BoolNe(true)
func (s FooSlice) BoolNe(b bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Bool != b && !yield(k, v) {
                break
            }
        }
    }
}

// BoolNe filters the iterator items to [Foo] whose [Foo.Bool] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.BoolNe(true)
func (m FooMap[T]) BoolNe(b bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Bool != b && !yield(k, v) {
                break
            }
        }
    }
}

// BoolNe filters the iterator items to [Foo] whose [Foo.Bool] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.BoolNe(true)
func (s FooSeq) BoolNe(b bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Bool != b && !yield(v) {
                break
            }
        }
    }
}

// BoolNe filters the iterator items to [Foo] whose [Foo.Bool] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.BoolNe(true)
func (s FooSeq2[T]) BoolNe(b bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Bool != b && !yield(k, v) {
                break
            }
        }
    }
}

// BoolMatches filters the iterator items to [Foo] whose [Foo.Bool] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Bool(func(b bool) bool { return b })
func (s FooSlice) BoolMatches(matcher func(bool) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Bool) && !yield(k, v) {
                break
            }
        }
    }
}

// BoolMatches filters the iterator items to [Foo] whose [Foo.Bool] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Bool(func(b bool) bool { return b })
func (m FooMap[T]) BoolMatches(matcher func(bool) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Bool) && !yield(k, v) {
                break
            }
        }
    }
}

// BoolMatches filters the iterator items to [Foo] whose [Foo.Bool] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Bool(func(b bool) bool { return b })
func (s FooSeq) BoolMatches(matcher func(bool) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Bool) && !yield(v) {
                break
            }
        }
    }
}

// BoolMatches filters the iterator items to [Foo] whose [Foo.Bool] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Bool(func(b bool) bool { return b })
func (s FooSeq2[T]) BoolMatches(matcher func(bool) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Bool) && !yield(k, v) {
                break
            }
        }
    }
}

// UintEq filters the iterator items to [Foo] whose [Foo.Uint] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.UintEq(1)
func (s FooSlice) UintEq(val uint) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint == val && !yield(k, v) {
                break
            }
        }
    }
}

// UintEq filters the iterator items to [Foo] whose [Foo.Uint] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.UintEq(1)
func (m FooMap[T]) UintEq(val uint) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint == val && !yield(k, v) {
                break
            }
        }
    }
}

// UintEq filters the iterator items to [Foo] whose [Foo.Uint] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.UintEq(1)
func (s FooSeq) UintEq(val uint) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint == val && !yield(v) {
                break
            }
        }
    }
}

// UintEq filters the iterator items to [Foo] whose [Foo.Uint] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.UintEq(1)
func (s FooSeq2[T]) UintEq(val uint) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint == val && !yield(k, v) {
                break
            }
        }
    }
}

// UintNe filters the iterator items to [Foo] whose [Foo.Uint] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.UintNe(1)
func (s FooSlice) UintNe(val uint) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint != val && !yield(k, v) {
                break
            }
        }
    }
}

// UintNe filters the iterator items to [Foo] whose [Foo.Uint] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.UintNe(1)
func (m FooMap[T]) UintNe(val uint) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint != val && !yield(k, v) {
                break
            }
        }
    }
}

// UintNe filters the iterator items to [Foo] whose [Foo.Uint] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.UintNe(1)
func (s FooSeq) UintNe(val uint) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint != val && !yield(v) {
                break
            }
        }
    }
}

// UintNe filters the iterator items to [Foo] whose [Foo.Uint] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.UintNe(1)
func (s FooSeq2[T]) UintNe(val uint) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint != val && !yield(k, v) {
                break
            }
        }
    }
}

// UintGt filters the iterator items to [Foo] whose [Foo.Uint] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.UintGt(1)
func (s FooSlice) UintGt(val uint) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint > val && !yield(k, v) {
                break
            }
        }
    }
}

// UintGt filters the iterator items to [Foo] whose [Foo.Uint] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooMap.UintGt(1)
func (m FooMap[T]) UintGt(val uint) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint > val && !yield(k, v) {
                break
            }
        }
    }
}

// UintGt filters the iterator items to [Foo] whose [Foo.Uint] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.UintGt(1)
func (s FooSeq) UintGt(val uint) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint > val && !yield(v) {
                break
            }
        }
    }
}

// UintGt filters the iterator items to [Foo] whose [Foo.Uint] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.UintGt(1)
func (s FooSeq2[T]) UintGt(val uint) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint > val && !yield(k, v) {
                break
            }
        }
    }
}

// UintLt filters the iterator items to [Foo] whose [Foo.Uint] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.UintLt(1)
func (s FooSlice) UintLt(val uint) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint < val && !yield(k, v) {
                break
            }
        }
    }
}

// UintLt filters the iterator items to [Foo] whose [Foo.Uint] is less than the argument.
//
// Example:
//
// 	for k, v := range fooMap.UintLt(1)
func (m FooMap[T]) UintLt(val uint) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint < val && !yield(k, v) {
                break
            }
        }
    }
}

// UintLt filters the iterator items to [Foo] whose [Foo.Uint] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.UintLt(1)
func (s FooSeq) UintLt(val uint) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint < val && !yield(v) {
                break
            }
        }
    }
}

// UintLt filters the iterator items to [Foo] whose [Foo.Uint] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.UintLt(1)
func (s FooSeq2[T]) UintLt(val uint) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint < val && !yield(k, v) {
                break
            }
        }
    }
}

// UintGe filters the iterator items to [Foo] whose [Foo.Uint] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.UintGe(1)
func (s FooSlice) UintGe(val uint) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint >= val && !yield(k, v) {
                break
            }
        }
    }
}

// UintGe filters the iterator items to [Foo] whose [Foo.Uint] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.UintGe(1)
func (m FooMap[T]) UintGe(val uint) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint >= val && !yield(k, v) {
                break
            }
        }
    }
}

// UintGe filters the iterator items to [Foo] whose [Foo.Uint] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.UintGe(1)
func (s FooSeq) UintGe(val uint) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint >= val && !yield(v) {
                break
            }
        }
    }
}

// UintGe filters the iterator items to [Foo] whose [Foo.Uint] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.UintGe(1)
func (s FooSeq2[T]) UintGe(val uint) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint >= val && !yield(k, v) {
                break
            }
        }
    }
}

// UintLe filters the iterator items to [Foo] whose [Foo.Uint] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.UintLe(1)
func (s FooSlice) UintLe(val uint) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint <= val && !yield(k, v) {
                break
            }
        }
    }
}

// UintLe filters the iterator items to [Foo] whose [Foo.Uint] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.UintLe(1)
func (m FooMap[T]) UintLe(val uint) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint <= val && !yield(k, v) {
                break
            }
        }
    }
}

// UintLe filters the iterator items to [Foo] whose [Foo.Uint] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.UintLe(1)
func (s FooSeq) UintLe(val uint) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint <= val && !yield(v) {
                break
            }
        }
    }
}

// UintLe filters the iterator items to [Foo] whose [Foo.Uint] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.UintLe(1)
func (s FooSeq2[T]) UintLe(val uint) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint <= val && !yield(k, v) {
                break
            }
        }
    }
}

// UintMatches filters the iterator items to [Foo] whose [Foo.Uint] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint(func(val uint) bool { return i % 2 == 0 })
func (s FooSlice) UintMatches(matcher func(uint) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Uint) && !yield(k, v) {
                break
            }
        }
    }
}

// UintMatches filters the iterator items to [Foo] whose [Foo.Uint] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint(func(val uint) bool { return i % 2 == 0 })
func (m FooMap[T]) UintMatches(matcher func(uint) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Uint) && !yield(k, v) {
                break
            }
        }
    }
}

// UintMatches filters the iterator items to [Foo] whose [Foo.Uint] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint(func(val uint) bool { return i % 2 == 0 })
func (s FooSeq) UintMatches(matcher func(uint) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Uint) && !yield(v) {
                break
            }
        }
    }
}

// UintMatches filters the iterator items to [Foo] whose [Foo.Uint] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint(func(val uint) bool { return i % 2 == 0 })
func (s FooSeq2[T]) UintMatches(matcher func(uint) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Uint) && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Eq filters the iterator items to [Foo] whose [Foo.Uint8] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint8Eq(1)
func (s FooSlice) Uint8Eq(val uint8) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint8 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Eq filters the iterator items to [Foo] whose [Foo.Uint8] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint8Eq(1)
func (m FooMap[T]) Uint8Eq(val uint8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint8 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Eq filters the iterator items to [Foo] whose [Foo.Uint8] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint8Eq(1)
func (s FooSeq) Uint8Eq(val uint8) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint8 == val && !yield(v) {
                break
            }
        }
    }
}

// Uint8Eq filters the iterator items to [Foo] whose [Foo.Uint8] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint8Eq(1)
func (s FooSeq2[T]) Uint8Eq(val uint8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint8 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Ne filters the iterator items to [Foo] whose [Foo.Uint8] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint8Ne(1)
func (s FooSlice) Uint8Ne(val uint8) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint8 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Ne filters the iterator items to [Foo] whose [Foo.Uint8] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint8Ne(1)
func (m FooMap[T]) Uint8Ne(val uint8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint8 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Ne filters the iterator items to [Foo] whose [Foo.Uint8] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint8Ne(1)
func (s FooSeq) Uint8Ne(val uint8) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint8 != val && !yield(v) {
                break
            }
        }
    }
}

// Uint8Ne filters the iterator items to [Foo] whose [Foo.Uint8] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint8Ne(1)
func (s FooSeq2[T]) Uint8Ne(val uint8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint8 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Gt filters the iterator items to [Foo] whose [Foo.Uint8] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint8Gt(1)
func (s FooSlice) Uint8Gt(val uint8) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint8 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Gt filters the iterator items to [Foo] whose [Foo.Uint8] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint8Gt(1)
func (m FooMap[T]) Uint8Gt(val uint8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint8 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Gt filters the iterator items to [Foo] whose [Foo.Uint8] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint8Gt(1)
func (s FooSeq) Uint8Gt(val uint8) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint8 > val && !yield(v) {
                break
            }
        }
    }
}

// Uint8Gt filters the iterator items to [Foo] whose [Foo.Uint8] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint8Gt(1)
func (s FooSeq2[T]) Uint8Gt(val uint8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint8 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Lt filters the iterator items to [Foo] whose [Foo.Uint8] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint8Lt(1)
func (s FooSlice) Uint8Lt(val uint8) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint8 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Lt filters the iterator items to [Foo] whose [Foo.Uint8] is less than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint8Lt(1)
func (m FooMap[T]) Uint8Lt(val uint8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint8 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Lt filters the iterator items to [Foo] whose [Foo.Uint8] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint8Lt(1)
func (s FooSeq) Uint8Lt(val uint8) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint8 < val && !yield(v) {
                break
            }
        }
    }
}

// Uint8Lt filters the iterator items to [Foo] whose [Foo.Uint8] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint8Lt(1)
func (s FooSeq2[T]) Uint8Lt(val uint8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint8 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Ge filters the iterator items to [Foo] whose [Foo.Uint8] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint8Ge(1)
func (s FooSlice) Uint8Ge(val uint8) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint8 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Ge filters the iterator items to [Foo] whose [Foo.Uint8] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint8Ge(1)
func (m FooMap[T]) Uint8Ge(val uint8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint8 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Ge filters the iterator items to [Foo] whose [Foo.Uint8] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint8Ge(1)
func (s FooSeq) Uint8Ge(val uint8) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint8 >= val && !yield(v) {
                break
            }
        }
    }
}

// Uint8Ge filters the iterator items to [Foo] whose [Foo.Uint8] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint8Ge(1)
func (s FooSeq2[T]) Uint8Ge(val uint8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint8 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Le filters the iterator items to [Foo] whose [Foo.Uint8] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint8Le(1)
func (s FooSlice) Uint8Le(val uint8) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint8 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Le filters the iterator items to [Foo] whose [Foo.Uint8] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint8Le(1)
func (m FooMap[T]) Uint8Le(val uint8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint8 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Le filters the iterator items to [Foo] whose [Foo.Uint8] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint8Le(1)
func (s FooSeq) Uint8Le(val uint8) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint8 <= val && !yield(v) {
                break
            }
        }
    }
}

// Uint8Le filters the iterator items to [Foo] whose [Foo.Uint8] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint8Le(1)
func (s FooSeq2[T]) Uint8Le(val uint8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint8 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Matches filters the iterator items to [Foo] whose [Foo.Uint8] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint8(func(val uint8) bool { return i % 2 == 0 })
func (s FooSlice) Uint8Matches(matcher func(uint8) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Uint8) && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Matches filters the iterator items to [Foo] whose [Foo.Uint8] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint8(func(val uint8) bool { return i % 2 == 0 })
func (m FooMap[T]) Uint8Matches(matcher func(uint8) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Uint8) && !yield(k, v) {
                break
            }
        }
    }
}

// Uint8Matches filters the iterator items to [Foo] whose [Foo.Uint8] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint8(func(val uint8) bool { return i % 2 == 0 })
func (s FooSeq) Uint8Matches(matcher func(uint8) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Uint8) && !yield(v) {
                break
            }
        }
    }
}

// Uint8Matches filters the iterator items to [Foo] whose [Foo.Uint8] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint8(func(val uint8) bool { return i % 2 == 0 })
func (s FooSeq2[T]) Uint8Matches(matcher func(uint8) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Uint8) && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Eq filters the iterator items to [Foo] whose [Foo.Uint16] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint16Eq(1)
func (s FooSlice) Uint16Eq(val uint16) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint16 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Eq filters the iterator items to [Foo] whose [Foo.Uint16] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint16Eq(1)
func (m FooMap[T]) Uint16Eq(val uint16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint16 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Eq filters the iterator items to [Foo] whose [Foo.Uint16] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint16Eq(1)
func (s FooSeq) Uint16Eq(val uint16) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint16 == val && !yield(v) {
                break
            }
        }
    }
}

// Uint16Eq filters the iterator items to [Foo] whose [Foo.Uint16] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint16Eq(1)
func (s FooSeq2[T]) Uint16Eq(val uint16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint16 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Ne filters the iterator items to [Foo] whose [Foo.Uint16] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint16Ne(1)
func (s FooSlice) Uint16Ne(val uint16) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint16 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Ne filters the iterator items to [Foo] whose [Foo.Uint16] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint16Ne(1)
func (m FooMap[T]) Uint16Ne(val uint16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint16 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Ne filters the iterator items to [Foo] whose [Foo.Uint16] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint16Ne(1)
func (s FooSeq) Uint16Ne(val uint16) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint16 != val && !yield(v) {
                break
            }
        }
    }
}

// Uint16Ne filters the iterator items to [Foo] whose [Foo.Uint16] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint16Ne(1)
func (s FooSeq2[T]) Uint16Ne(val uint16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint16 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Gt filters the iterator items to [Foo] whose [Foo.Uint16] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint16Gt(1)
func (s FooSlice) Uint16Gt(val uint16) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint16 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Gt filters the iterator items to [Foo] whose [Foo.Uint16] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint16Gt(1)
func (m FooMap[T]) Uint16Gt(val uint16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint16 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Gt filters the iterator items to [Foo] whose [Foo.Uint16] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint16Gt(1)
func (s FooSeq) Uint16Gt(val uint16) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint16 > val && !yield(v) {
                break
            }
        }
    }
}

// Uint16Gt filters the iterator items to [Foo] whose [Foo.Uint16] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint16Gt(1)
func (s FooSeq2[T]) Uint16Gt(val uint16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint16 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Lt filters the iterator items to [Foo] whose [Foo.Uint16] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint16Lt(1)
func (s FooSlice) Uint16Lt(val uint16) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint16 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Lt filters the iterator items to [Foo] whose [Foo.Uint16] is less than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint16Lt(1)
func (m FooMap[T]) Uint16Lt(val uint16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint16 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Lt filters the iterator items to [Foo] whose [Foo.Uint16] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint16Lt(1)
func (s FooSeq) Uint16Lt(val uint16) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint16 < val && !yield(v) {
                break
            }
        }
    }
}

// Uint16Lt filters the iterator items to [Foo] whose [Foo.Uint16] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint16Lt(1)
func (s FooSeq2[T]) Uint16Lt(val uint16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint16 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Ge filters the iterator items to [Foo] whose [Foo.Uint16] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint16Ge(1)
func (s FooSlice) Uint16Ge(val uint16) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint16 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Ge filters the iterator items to [Foo] whose [Foo.Uint16] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint16Ge(1)
func (m FooMap[T]) Uint16Ge(val uint16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint16 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Ge filters the iterator items to [Foo] whose [Foo.Uint16] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint16Ge(1)
func (s FooSeq) Uint16Ge(val uint16) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint16 >= val && !yield(v) {
                break
            }
        }
    }
}

// Uint16Ge filters the iterator items to [Foo] whose [Foo.Uint16] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint16Ge(1)
func (s FooSeq2[T]) Uint16Ge(val uint16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint16 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Le filters the iterator items to [Foo] whose [Foo.Uint16] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint16Le(1)
func (s FooSlice) Uint16Le(val uint16) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint16 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Le filters the iterator items to [Foo] whose [Foo.Uint16] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint16Le(1)
func (m FooMap[T]) Uint16Le(val uint16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint16 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Le filters the iterator items to [Foo] whose [Foo.Uint16] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint16Le(1)
func (s FooSeq) Uint16Le(val uint16) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint16 <= val && !yield(v) {
                break
            }
        }
    }
}

// Uint16Le filters the iterator items to [Foo] whose [Foo.Uint16] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint16Le(1)
func (s FooSeq2[T]) Uint16Le(val uint16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint16 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Matches filters the iterator items to [Foo] whose [Foo.Uint16] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint16(func(val uint16) bool { return i % 2 == 0 })
func (s FooSlice) Uint16Matches(matcher func(uint16) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Uint16) && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Matches filters the iterator items to [Foo] whose [Foo.Uint16] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint16(func(val uint16) bool { return i % 2 == 0 })
func (m FooMap[T]) Uint16Matches(matcher func(uint16) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Uint16) && !yield(k, v) {
                break
            }
        }
    }
}

// Uint16Matches filters the iterator items to [Foo] whose [Foo.Uint16] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint16(func(val uint16) bool { return i % 2 == 0 })
func (s FooSeq) Uint16Matches(matcher func(uint16) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Uint16) && !yield(v) {
                break
            }
        }
    }
}

// Uint16Matches filters the iterator items to [Foo] whose [Foo.Uint16] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint16(func(val uint16) bool { return i % 2 == 0 })
func (s FooSeq2[T]) Uint16Matches(matcher func(uint16) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Uint16) && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Eq filters the iterator items to [Foo] whose [Foo.Uint32] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint32Eq(1)
func (s FooSlice) Uint32Eq(val uint32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint32 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Eq filters the iterator items to [Foo] whose [Foo.Uint32] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint32Eq(1)
func (m FooMap[T]) Uint32Eq(val uint32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint32 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Eq filters the iterator items to [Foo] whose [Foo.Uint32] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint32Eq(1)
func (s FooSeq) Uint32Eq(val uint32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint32 == val && !yield(v) {
                break
            }
        }
    }
}

// Uint32Eq filters the iterator items to [Foo] whose [Foo.Uint32] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint32Eq(1)
func (s FooSeq2[T]) Uint32Eq(val uint32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint32 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Ne filters the iterator items to [Foo] whose [Foo.Uint32] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint32Ne(1)
func (s FooSlice) Uint32Ne(val uint32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint32 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Ne filters the iterator items to [Foo] whose [Foo.Uint32] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint32Ne(1)
func (m FooMap[T]) Uint32Ne(val uint32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint32 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Ne filters the iterator items to [Foo] whose [Foo.Uint32] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint32Ne(1)
func (s FooSeq) Uint32Ne(val uint32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint32 != val && !yield(v) {
                break
            }
        }
    }
}

// Uint32Ne filters the iterator items to [Foo] whose [Foo.Uint32] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint32Ne(1)
func (s FooSeq2[T]) Uint32Ne(val uint32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint32 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Gt filters the iterator items to [Foo] whose [Foo.Uint32] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint32Gt(1)
func (s FooSlice) Uint32Gt(val uint32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint32 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Gt filters the iterator items to [Foo] whose [Foo.Uint32] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint32Gt(1)
func (m FooMap[T]) Uint32Gt(val uint32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint32 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Gt filters the iterator items to [Foo] whose [Foo.Uint32] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint32Gt(1)
func (s FooSeq) Uint32Gt(val uint32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint32 > val && !yield(v) {
                break
            }
        }
    }
}

// Uint32Gt filters the iterator items to [Foo] whose [Foo.Uint32] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint32Gt(1)
func (s FooSeq2[T]) Uint32Gt(val uint32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint32 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Lt filters the iterator items to [Foo] whose [Foo.Uint32] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint32Lt(1)
func (s FooSlice) Uint32Lt(val uint32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint32 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Lt filters the iterator items to [Foo] whose [Foo.Uint32] is less than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint32Lt(1)
func (m FooMap[T]) Uint32Lt(val uint32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint32 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Lt filters the iterator items to [Foo] whose [Foo.Uint32] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint32Lt(1)
func (s FooSeq) Uint32Lt(val uint32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint32 < val && !yield(v) {
                break
            }
        }
    }
}

// Uint32Lt filters the iterator items to [Foo] whose [Foo.Uint32] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint32Lt(1)
func (s FooSeq2[T]) Uint32Lt(val uint32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint32 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Ge filters the iterator items to [Foo] whose [Foo.Uint32] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint32Ge(1)
func (s FooSlice) Uint32Ge(val uint32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint32 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Ge filters the iterator items to [Foo] whose [Foo.Uint32] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint32Ge(1)
func (m FooMap[T]) Uint32Ge(val uint32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint32 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Ge filters the iterator items to [Foo] whose [Foo.Uint32] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint32Ge(1)
func (s FooSeq) Uint32Ge(val uint32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint32 >= val && !yield(v) {
                break
            }
        }
    }
}

// Uint32Ge filters the iterator items to [Foo] whose [Foo.Uint32] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint32Ge(1)
func (s FooSeq2[T]) Uint32Ge(val uint32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint32 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Le filters the iterator items to [Foo] whose [Foo.Uint32] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint32Le(1)
func (s FooSlice) Uint32Le(val uint32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint32 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Le filters the iterator items to [Foo] whose [Foo.Uint32] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint32Le(1)
func (m FooMap[T]) Uint32Le(val uint32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint32 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Le filters the iterator items to [Foo] whose [Foo.Uint32] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint32Le(1)
func (s FooSeq) Uint32Le(val uint32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint32 <= val && !yield(v) {
                break
            }
        }
    }
}

// Uint32Le filters the iterator items to [Foo] whose [Foo.Uint32] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint32Le(1)
func (s FooSeq2[T]) Uint32Le(val uint32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint32 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Matches filters the iterator items to [Foo] whose [Foo.Uint32] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint32(func(val uint32) bool { return i % 2 == 0 })
func (s FooSlice) Uint32Matches(matcher func(uint32) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Uint32) && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Matches filters the iterator items to [Foo] whose [Foo.Uint32] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint32(func(val uint32) bool { return i % 2 == 0 })
func (m FooMap[T]) Uint32Matches(matcher func(uint32) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Uint32) && !yield(k, v) {
                break
            }
        }
    }
}

// Uint32Matches filters the iterator items to [Foo] whose [Foo.Uint32] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint32(func(val uint32) bool { return i % 2 == 0 })
func (s FooSeq) Uint32Matches(matcher func(uint32) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Uint32) && !yield(v) {
                break
            }
        }
    }
}

// Uint32Matches filters the iterator items to [Foo] whose [Foo.Uint32] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint32(func(val uint32) bool { return i % 2 == 0 })
func (s FooSeq2[T]) Uint32Matches(matcher func(uint32) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Uint32) && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Eq filters the iterator items to [Foo] whose [Foo.Uint64] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint64Eq(1)
func (s FooSlice) Uint64Eq(val uint64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint64 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Eq filters the iterator items to [Foo] whose [Foo.Uint64] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint64Eq(1)
func (m FooMap[T]) Uint64Eq(val uint64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint64 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Eq filters the iterator items to [Foo] whose [Foo.Uint64] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint64Eq(1)
func (s FooSeq) Uint64Eq(val uint64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint64 == val && !yield(v) {
                break
            }
        }
    }
}

// Uint64Eq filters the iterator items to [Foo] whose [Foo.Uint64] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint64Eq(1)
func (s FooSeq2[T]) Uint64Eq(val uint64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint64 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Ne filters the iterator items to [Foo] whose [Foo.Uint64] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint64Ne(1)
func (s FooSlice) Uint64Ne(val uint64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint64 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Ne filters the iterator items to [Foo] whose [Foo.Uint64] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint64Ne(1)
func (m FooMap[T]) Uint64Ne(val uint64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint64 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Ne filters the iterator items to [Foo] whose [Foo.Uint64] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint64Ne(1)
func (s FooSeq) Uint64Ne(val uint64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint64 != val && !yield(v) {
                break
            }
        }
    }
}

// Uint64Ne filters the iterator items to [Foo] whose [Foo.Uint64] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint64Ne(1)
func (s FooSeq2[T]) Uint64Ne(val uint64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint64 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Gt filters the iterator items to [Foo] whose [Foo.Uint64] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint64Gt(1)
func (s FooSlice) Uint64Gt(val uint64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint64 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Gt filters the iterator items to [Foo] whose [Foo.Uint64] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint64Gt(1)
func (m FooMap[T]) Uint64Gt(val uint64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint64 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Gt filters the iterator items to [Foo] whose [Foo.Uint64] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint64Gt(1)
func (s FooSeq) Uint64Gt(val uint64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint64 > val && !yield(v) {
                break
            }
        }
    }
}

// Uint64Gt filters the iterator items to [Foo] whose [Foo.Uint64] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint64Gt(1)
func (s FooSeq2[T]) Uint64Gt(val uint64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint64 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Lt filters the iterator items to [Foo] whose [Foo.Uint64] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint64Lt(1)
func (s FooSlice) Uint64Lt(val uint64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint64 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Lt filters the iterator items to [Foo] whose [Foo.Uint64] is less than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint64Lt(1)
func (m FooMap[T]) Uint64Lt(val uint64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint64 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Lt filters the iterator items to [Foo] whose [Foo.Uint64] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint64Lt(1)
func (s FooSeq) Uint64Lt(val uint64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint64 < val && !yield(v) {
                break
            }
        }
    }
}

// Uint64Lt filters the iterator items to [Foo] whose [Foo.Uint64] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint64Lt(1)
func (s FooSeq2[T]) Uint64Lt(val uint64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint64 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Ge filters the iterator items to [Foo] whose [Foo.Uint64] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint64Ge(1)
func (s FooSlice) Uint64Ge(val uint64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint64 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Ge filters the iterator items to [Foo] whose [Foo.Uint64] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint64Ge(1)
func (m FooMap[T]) Uint64Ge(val uint64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint64 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Ge filters the iterator items to [Foo] whose [Foo.Uint64] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint64Ge(1)
func (s FooSeq) Uint64Ge(val uint64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint64 >= val && !yield(v) {
                break
            }
        }
    }
}

// Uint64Ge filters the iterator items to [Foo] whose [Foo.Uint64] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint64Ge(1)
func (s FooSeq2[T]) Uint64Ge(val uint64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint64 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Le filters the iterator items to [Foo] whose [Foo.Uint64] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint64Le(1)
func (s FooSlice) Uint64Le(val uint64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uint64 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Le filters the iterator items to [Foo] whose [Foo.Uint64] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint64Le(1)
func (m FooMap[T]) Uint64Le(val uint64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uint64 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Le filters the iterator items to [Foo] whose [Foo.Uint64] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint64Le(1)
func (s FooSeq) Uint64Le(val uint64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uint64 <= val && !yield(v) {
                break
            }
        }
    }
}

// Uint64Le filters the iterator items to [Foo] whose [Foo.Uint64] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint64Le(1)
func (s FooSeq2[T]) Uint64Le(val uint64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uint64 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Matches filters the iterator items to [Foo] whose [Foo.Uint64] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uint64(func(val uint64) bool { return i % 2 == 0 })
func (s FooSlice) Uint64Matches(matcher func(uint64) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Uint64) && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Matches filters the iterator items to [Foo] whose [Foo.Uint64] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uint64(func(val uint64) bool { return i % 2 == 0 })
func (m FooMap[T]) Uint64Matches(matcher func(uint64) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Uint64) && !yield(k, v) {
                break
            }
        }
    }
}

// Uint64Matches filters the iterator items to [Foo] whose [Foo.Uint64] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uint64(func(val uint64) bool { return i % 2 == 0 })
func (s FooSeq) Uint64Matches(matcher func(uint64) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Uint64) && !yield(v) {
                break
            }
        }
    }
}

// Uint64Matches filters the iterator items to [Foo] whose [Foo.Uint64] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uint64(func(val uint64) bool { return i % 2 == 0 })
func (s FooSeq2[T]) Uint64Matches(matcher func(uint64) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Uint64) && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrEq filters the iterator items to [Foo] whose [Foo.Uintptr] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.UintptrEq(1)
func (s FooSlice) UintptrEq(val uintptr) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uintptr == val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrEq filters the iterator items to [Foo] whose [Foo.Uintptr] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.UintptrEq(1)
func (m FooMap[T]) UintptrEq(val uintptr) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uintptr == val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrEq filters the iterator items to [Foo] whose [Foo.Uintptr] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.UintptrEq(1)
func (s FooSeq) UintptrEq(val uintptr) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uintptr == val && !yield(v) {
                break
            }
        }
    }
}

// UintptrEq filters the iterator items to [Foo] whose [Foo.Uintptr] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.UintptrEq(1)
func (s FooSeq2[T]) UintptrEq(val uintptr) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uintptr == val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrNe filters the iterator items to [Foo] whose [Foo.Uintptr] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.UintptrNe(1)
func (s FooSlice) UintptrNe(val uintptr) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uintptr != val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrNe filters the iterator items to [Foo] whose [Foo.Uintptr] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.UintptrNe(1)
func (m FooMap[T]) UintptrNe(val uintptr) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uintptr != val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrNe filters the iterator items to [Foo] whose [Foo.Uintptr] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.UintptrNe(1)
func (s FooSeq) UintptrNe(val uintptr) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uintptr != val && !yield(v) {
                break
            }
        }
    }
}

// UintptrNe filters the iterator items to [Foo] whose [Foo.Uintptr] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.UintptrNe(1)
func (s FooSeq2[T]) UintptrNe(val uintptr) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uintptr != val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrGt filters the iterator items to [Foo] whose [Foo.Uintptr] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.UintptrGt(1)
func (s FooSlice) UintptrGt(val uintptr) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uintptr > val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrGt filters the iterator items to [Foo] whose [Foo.Uintptr] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooMap.UintptrGt(1)
func (m FooMap[T]) UintptrGt(val uintptr) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uintptr > val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrGt filters the iterator items to [Foo] whose [Foo.Uintptr] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.UintptrGt(1)
func (s FooSeq) UintptrGt(val uintptr) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uintptr > val && !yield(v) {
                break
            }
        }
    }
}

// UintptrGt filters the iterator items to [Foo] whose [Foo.Uintptr] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.UintptrGt(1)
func (s FooSeq2[T]) UintptrGt(val uintptr) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uintptr > val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrLt filters the iterator items to [Foo] whose [Foo.Uintptr] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.UintptrLt(1)
func (s FooSlice) UintptrLt(val uintptr) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uintptr < val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrLt filters the iterator items to [Foo] whose [Foo.Uintptr] is less than the argument.
//
// Example:
//
// 	for k, v := range fooMap.UintptrLt(1)
func (m FooMap[T]) UintptrLt(val uintptr) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uintptr < val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrLt filters the iterator items to [Foo] whose [Foo.Uintptr] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.UintptrLt(1)
func (s FooSeq) UintptrLt(val uintptr) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uintptr < val && !yield(v) {
                break
            }
        }
    }
}

// UintptrLt filters the iterator items to [Foo] whose [Foo.Uintptr] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.UintptrLt(1)
func (s FooSeq2[T]) UintptrLt(val uintptr) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uintptr < val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrGe filters the iterator items to [Foo] whose [Foo.Uintptr] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.UintptrGe(1)
func (s FooSlice) UintptrGe(val uintptr) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uintptr >= val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrGe filters the iterator items to [Foo] whose [Foo.Uintptr] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.UintptrGe(1)
func (m FooMap[T]) UintptrGe(val uintptr) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uintptr >= val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrGe filters the iterator items to [Foo] whose [Foo.Uintptr] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.UintptrGe(1)
func (s FooSeq) UintptrGe(val uintptr) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uintptr >= val && !yield(v) {
                break
            }
        }
    }
}

// UintptrGe filters the iterator items to [Foo] whose [Foo.Uintptr] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.UintptrGe(1)
func (s FooSeq2[T]) UintptrGe(val uintptr) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uintptr >= val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrLe filters the iterator items to [Foo] whose [Foo.Uintptr] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.UintptrLe(1)
func (s FooSlice) UintptrLe(val uintptr) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Uintptr <= val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrLe filters the iterator items to [Foo] whose [Foo.Uintptr] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.UintptrLe(1)
func (m FooMap[T]) UintptrLe(val uintptr) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Uintptr <= val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrLe filters the iterator items to [Foo] whose [Foo.Uintptr] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.UintptrLe(1)
func (s FooSeq) UintptrLe(val uintptr) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Uintptr <= val && !yield(v) {
                break
            }
        }
    }
}

// UintptrLe filters the iterator items to [Foo] whose [Foo.Uintptr] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.UintptrLe(1)
func (s FooSeq2[T]) UintptrLe(val uintptr) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Uintptr <= val && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrMatches filters the iterator items to [Foo] whose [Foo.Uintptr] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Uintptr(func(val uintptr) bool { return i % 2 == 0 })
func (s FooSlice) UintptrMatches(matcher func(uintptr) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Uintptr) && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrMatches filters the iterator items to [Foo] whose [Foo.Uintptr] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Uintptr(func(val uintptr) bool { return i % 2 == 0 })
func (m FooMap[T]) UintptrMatches(matcher func(uintptr) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Uintptr) && !yield(k, v) {
                break
            }
        }
    }
}

// UintptrMatches filters the iterator items to [Foo] whose [Foo.Uintptr] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Uintptr(func(val uintptr) bool { return i % 2 == 0 })
func (s FooSeq) UintptrMatches(matcher func(uintptr) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Uintptr) && !yield(v) {
                break
            }
        }
    }
}

// UintptrMatches filters the iterator items to [Foo] whose [Foo.Uintptr] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Uintptr(func(val uintptr) bool { return i % 2 == 0 })
func (s FooSeq2[T]) UintptrMatches(matcher func(uintptr) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Uintptr) && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Eq filters the iterator items to [Foo] whose [Foo.Float32] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Float32Eq(1)
func (s FooSlice) Float32Eq(val float32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Float32 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Eq filters the iterator items to [Foo] whose [Foo.Float32] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Float32Eq(1)
func (m FooMap[T]) Float32Eq(val float32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Float32 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Eq filters the iterator items to [Foo] whose [Foo.Float32] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Float32Eq(1)
func (s FooSeq) Float32Eq(val float32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Float32 == val && !yield(v) {
                break
            }
        }
    }
}

// Float32Eq filters the iterator items to [Foo] whose [Foo.Float32] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Float32Eq(1)
func (s FooSeq2[T]) Float32Eq(val float32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Float32 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Ne filters the iterator items to [Foo] whose [Foo.Float32] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Float32Ne(1)
func (s FooSlice) Float32Ne(val float32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Float32 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Ne filters the iterator items to [Foo] whose [Foo.Float32] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Float32Ne(1)
func (m FooMap[T]) Float32Ne(val float32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Float32 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Ne filters the iterator items to [Foo] whose [Foo.Float32] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Float32Ne(1)
func (s FooSeq) Float32Ne(val float32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Float32 != val && !yield(v) {
                break
            }
        }
    }
}

// Float32Ne filters the iterator items to [Foo] whose [Foo.Float32] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Float32Ne(1)
func (s FooSeq2[T]) Float32Ne(val float32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Float32 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Gt filters the iterator items to [Foo] whose [Foo.Float32] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Float32Gt(1)
func (s FooSlice) Float32Gt(val float32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Float32 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Gt filters the iterator items to [Foo] whose [Foo.Float32] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Float32Gt(1)
func (m FooMap[T]) Float32Gt(val float32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Float32 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Gt filters the iterator items to [Foo] whose [Foo.Float32] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Float32Gt(1)
func (s FooSeq) Float32Gt(val float32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Float32 > val && !yield(v) {
                break
            }
        }
    }
}

// Float32Gt filters the iterator items to [Foo] whose [Foo.Float32] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Float32Gt(1)
func (s FooSeq2[T]) Float32Gt(val float32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Float32 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Lt filters the iterator items to [Foo] whose [Foo.Float32] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Float32Lt(1)
func (s FooSlice) Float32Lt(val float32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Float32 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Lt filters the iterator items to [Foo] whose [Foo.Float32] is less than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Float32Lt(1)
func (m FooMap[T]) Float32Lt(val float32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Float32 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Lt filters the iterator items to [Foo] whose [Foo.Float32] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Float32Lt(1)
func (s FooSeq) Float32Lt(val float32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Float32 < val && !yield(v) {
                break
            }
        }
    }
}

// Float32Lt filters the iterator items to [Foo] whose [Foo.Float32] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Float32Lt(1)
func (s FooSeq2[T]) Float32Lt(val float32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Float32 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Ge filters the iterator items to [Foo] whose [Foo.Float32] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Float32Ge(1)
func (s FooSlice) Float32Ge(val float32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Float32 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Ge filters the iterator items to [Foo] whose [Foo.Float32] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Float32Ge(1)
func (m FooMap[T]) Float32Ge(val float32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Float32 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Ge filters the iterator items to [Foo] whose [Foo.Float32] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Float32Ge(1)
func (s FooSeq) Float32Ge(val float32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Float32 >= val && !yield(v) {
                break
            }
        }
    }
}

// Float32Ge filters the iterator items to [Foo] whose [Foo.Float32] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Float32Ge(1)
func (s FooSeq2[T]) Float32Ge(val float32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Float32 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Le filters the iterator items to [Foo] whose [Foo.Float32] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Float32Le(1)
func (s FooSlice) Float32Le(val float32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Float32 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Le filters the iterator items to [Foo] whose [Foo.Float32] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Float32Le(1)
func (m FooMap[T]) Float32Le(val float32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Float32 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Le filters the iterator items to [Foo] whose [Foo.Float32] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Float32Le(1)
func (s FooSeq) Float32Le(val float32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Float32 <= val && !yield(v) {
                break
            }
        }
    }
}

// Float32Le filters the iterator items to [Foo] whose [Foo.Float32] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Float32Le(1)
func (s FooSeq2[T]) Float32Le(val float32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Float32 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Matches filters the iterator items to [Foo] whose [Foo.Float32] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Float32(func(val float32) bool { return i % 2 == 0 })
func (s FooSlice) Float32Matches(matcher func(float32) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Float32) && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Matches filters the iterator items to [Foo] whose [Foo.Float32] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Float32(func(val float32) bool { return i % 2 == 0 })
func (m FooMap[T]) Float32Matches(matcher func(float32) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Float32) && !yield(k, v) {
                break
            }
        }
    }
}

// Float32Matches filters the iterator items to [Foo] whose [Foo.Float32] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Float32(func(val float32) bool { return i % 2 == 0 })
func (s FooSeq) Float32Matches(matcher func(float32) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Float32) && !yield(v) {
                break
            }
        }
    }
}

// Float32Matches filters the iterator items to [Foo] whose [Foo.Float32] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Float32(func(val float32) bool { return i % 2 == 0 })
func (s FooSeq2[T]) Float32Matches(matcher func(float32) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Float32) && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Eq filters the iterator items to [Foo] whose [Foo.Float64] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Float64Eq(1)
func (s FooSlice) Float64Eq(val float64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Float64 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Eq filters the iterator items to [Foo] whose [Foo.Float64] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Float64Eq(1)
func (m FooMap[T]) Float64Eq(val float64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Float64 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Eq filters the iterator items to [Foo] whose [Foo.Float64] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Float64Eq(1)
func (s FooSeq) Float64Eq(val float64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Float64 == val && !yield(v) {
                break
            }
        }
    }
}

// Float64Eq filters the iterator items to [Foo] whose [Foo.Float64] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Float64Eq(1)
func (s FooSeq2[T]) Float64Eq(val float64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Float64 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Ne filters the iterator items to [Foo] whose [Foo.Float64] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Float64Ne(1)
func (s FooSlice) Float64Ne(val float64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Float64 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Ne filters the iterator items to [Foo] whose [Foo.Float64] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Float64Ne(1)
func (m FooMap[T]) Float64Ne(val float64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Float64 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Ne filters the iterator items to [Foo] whose [Foo.Float64] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Float64Ne(1)
func (s FooSeq) Float64Ne(val float64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Float64 != val && !yield(v) {
                break
            }
        }
    }
}

// Float64Ne filters the iterator items to [Foo] whose [Foo.Float64] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Float64Ne(1)
func (s FooSeq2[T]) Float64Ne(val float64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Float64 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Gt filters the iterator items to [Foo] whose [Foo.Float64] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Float64Gt(1)
func (s FooSlice) Float64Gt(val float64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Float64 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Gt filters the iterator items to [Foo] whose [Foo.Float64] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Float64Gt(1)
func (m FooMap[T]) Float64Gt(val float64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Float64 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Gt filters the iterator items to [Foo] whose [Foo.Float64] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Float64Gt(1)
func (s FooSeq) Float64Gt(val float64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Float64 > val && !yield(v) {
                break
            }
        }
    }
}

// Float64Gt filters the iterator items to [Foo] whose [Foo.Float64] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Float64Gt(1)
func (s FooSeq2[T]) Float64Gt(val float64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Float64 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Lt filters the iterator items to [Foo] whose [Foo.Float64] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Float64Lt(1)
func (s FooSlice) Float64Lt(val float64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Float64 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Lt filters the iterator items to [Foo] whose [Foo.Float64] is less than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Float64Lt(1)
func (m FooMap[T]) Float64Lt(val float64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Float64 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Lt filters the iterator items to [Foo] whose [Foo.Float64] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Float64Lt(1)
func (s FooSeq) Float64Lt(val float64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Float64 < val && !yield(v) {
                break
            }
        }
    }
}

// Float64Lt filters the iterator items to [Foo] whose [Foo.Float64] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Float64Lt(1)
func (s FooSeq2[T]) Float64Lt(val float64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Float64 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Ge filters the iterator items to [Foo] whose [Foo.Float64] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Float64Ge(1)
func (s FooSlice) Float64Ge(val float64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Float64 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Ge filters the iterator items to [Foo] whose [Foo.Float64] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Float64Ge(1)
func (m FooMap[T]) Float64Ge(val float64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Float64 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Ge filters the iterator items to [Foo] whose [Foo.Float64] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Float64Ge(1)
func (s FooSeq) Float64Ge(val float64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Float64 >= val && !yield(v) {
                break
            }
        }
    }
}

// Float64Ge filters the iterator items to [Foo] whose [Foo.Float64] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Float64Ge(1)
func (s FooSeq2[T]) Float64Ge(val float64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Float64 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Le filters the iterator items to [Foo] whose [Foo.Float64] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Float64Le(1)
func (s FooSlice) Float64Le(val float64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Float64 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Le filters the iterator items to [Foo] whose [Foo.Float64] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Float64Le(1)
func (m FooMap[T]) Float64Le(val float64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Float64 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Le filters the iterator items to [Foo] whose [Foo.Float64] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Float64Le(1)
func (s FooSeq) Float64Le(val float64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Float64 <= val && !yield(v) {
                break
            }
        }
    }
}

// Float64Le filters the iterator items to [Foo] whose [Foo.Float64] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Float64Le(1)
func (s FooSeq2[T]) Float64Le(val float64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Float64 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Matches filters the iterator items to [Foo] whose [Foo.Float64] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Float64(func(val float64) bool { return i % 2 == 0 })
func (s FooSlice) Float64Matches(matcher func(float64) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Float64) && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Matches filters the iterator items to [Foo] whose [Foo.Float64] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Float64(func(val float64) bool { return i % 2 == 0 })
func (m FooMap[T]) Float64Matches(matcher func(float64) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Float64) && !yield(k, v) {
                break
            }
        }
    }
}

// Float64Matches filters the iterator items to [Foo] whose [Foo.Float64] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Float64(func(val float64) bool { return i % 2 == 0 })
func (s FooSeq) Float64Matches(matcher func(float64) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Float64) && !yield(v) {
                break
            }
        }
    }
}

// Float64Matches filters the iterator items to [Foo] whose [Foo.Float64] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Float64(func(val float64) bool { return i % 2 == 0 })
func (s FooSeq2[T]) Float64Matches(matcher func(float64) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Float64) && !yield(k, v) {
                break
            }
        }
    }
}

// RuneEq filters the iterator items to [Foo] whose [Foo.Rune] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.RuneEq(1)
func (s FooSlice) RuneEq(val rune) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Rune == val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneEq filters the iterator items to [Foo] whose [Foo.Rune] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.RuneEq(1)
func (m FooMap[T]) RuneEq(val rune) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Rune == val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneEq filters the iterator items to [Foo] whose [Foo.Rune] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.RuneEq(1)
func (s FooSeq) RuneEq(val rune) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Rune == val && !yield(v) {
                break
            }
        }
    }
}

// RuneEq filters the iterator items to [Foo] whose [Foo.Rune] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.RuneEq(1)
func (s FooSeq2[T]) RuneEq(val rune) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Rune == val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneNe filters the iterator items to [Foo] whose [Foo.Rune] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.RuneNe(1)
func (s FooSlice) RuneNe(val rune) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Rune != val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneNe filters the iterator items to [Foo] whose [Foo.Rune] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.RuneNe(1)
func (m FooMap[T]) RuneNe(val rune) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Rune != val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneNe filters the iterator items to [Foo] whose [Foo.Rune] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.RuneNe(1)
func (s FooSeq) RuneNe(val rune) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Rune != val && !yield(v) {
                break
            }
        }
    }
}

// RuneNe filters the iterator items to [Foo] whose [Foo.Rune] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.RuneNe(1)
func (s FooSeq2[T]) RuneNe(val rune) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Rune != val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneGt filters the iterator items to [Foo] whose [Foo.Rune] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.RuneGt(1)
func (s FooSlice) RuneGt(val rune) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Rune > val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneGt filters the iterator items to [Foo] whose [Foo.Rune] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooMap.RuneGt(1)
func (m FooMap[T]) RuneGt(val rune) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Rune > val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneGt filters the iterator items to [Foo] whose [Foo.Rune] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.RuneGt(1)
func (s FooSeq) RuneGt(val rune) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Rune > val && !yield(v) {
                break
            }
        }
    }
}

// RuneGt filters the iterator items to [Foo] whose [Foo.Rune] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.RuneGt(1)
func (s FooSeq2[T]) RuneGt(val rune) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Rune > val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneLt filters the iterator items to [Foo] whose [Foo.Rune] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.RuneLt(1)
func (s FooSlice) RuneLt(val rune) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Rune < val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneLt filters the iterator items to [Foo] whose [Foo.Rune] is less than the argument.
//
// Example:
//
// 	for k, v := range fooMap.RuneLt(1)
func (m FooMap[T]) RuneLt(val rune) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Rune < val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneLt filters the iterator items to [Foo] whose [Foo.Rune] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.RuneLt(1)
func (s FooSeq) RuneLt(val rune) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Rune < val && !yield(v) {
                break
            }
        }
    }
}

// RuneLt filters the iterator items to [Foo] whose [Foo.Rune] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.RuneLt(1)
func (s FooSeq2[T]) RuneLt(val rune) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Rune < val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneGe filters the iterator items to [Foo] whose [Foo.Rune] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.RuneGe(1)
func (s FooSlice) RuneGe(val rune) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Rune >= val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneGe filters the iterator items to [Foo] whose [Foo.Rune] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.RuneGe(1)
func (m FooMap[T]) RuneGe(val rune) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Rune >= val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneGe filters the iterator items to [Foo] whose [Foo.Rune] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.RuneGe(1)
func (s FooSeq) RuneGe(val rune) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Rune >= val && !yield(v) {
                break
            }
        }
    }
}

// RuneGe filters the iterator items to [Foo] whose [Foo.Rune] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.RuneGe(1)
func (s FooSeq2[T]) RuneGe(val rune) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Rune >= val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneLe filters the iterator items to [Foo] whose [Foo.Rune] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.RuneLe(1)
func (s FooSlice) RuneLe(val rune) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Rune <= val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneLe filters the iterator items to [Foo] whose [Foo.Rune] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.RuneLe(1)
func (m FooMap[T]) RuneLe(val rune) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Rune <= val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneLe filters the iterator items to [Foo] whose [Foo.Rune] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.RuneLe(1)
func (s FooSeq) RuneLe(val rune) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Rune <= val && !yield(v) {
                break
            }
        }
    }
}

// RuneLe filters the iterator items to [Foo] whose [Foo.Rune] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.RuneLe(1)
func (s FooSeq2[T]) RuneLe(val rune) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Rune <= val && !yield(k, v) {
                break
            }
        }
    }
}

// RuneMatches filters the iterator items to [Foo] whose [Foo.Rune] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Rune(func(val rune) bool { return i % 2 == 0 })
func (s FooSlice) RuneMatches(matcher func(rune) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Rune) && !yield(k, v) {
                break
            }
        }
    }
}

// RuneMatches filters the iterator items to [Foo] whose [Foo.Rune] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Rune(func(val rune) bool { return i % 2 == 0 })
func (m FooMap[T]) RuneMatches(matcher func(rune) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Rune) && !yield(k, v) {
                break
            }
        }
    }
}

// RuneMatches filters the iterator items to [Foo] whose [Foo.Rune] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Rune(func(val rune) bool { return i % 2 == 0 })
func (s FooSeq) RuneMatches(matcher func(rune) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Rune) && !yield(v) {
                break
            }
        }
    }
}

// RuneMatches filters the iterator items to [Foo] whose [Foo.Rune] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Rune(func(val rune) bool { return i % 2 == 0 })
func (s FooSeq2[T]) RuneMatches(matcher func(rune) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Rune) && !yield(k, v) {
                break
            }
        }
    }
}

// ByteEq filters the iterator items to [Foo] whose [Foo.Byte] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.ByteEq(1)
func (s FooSlice) ByteEq(val byte) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Byte == val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteEq filters the iterator items to [Foo] whose [Foo.Byte] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.ByteEq(1)
func (m FooMap[T]) ByteEq(val byte) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Byte == val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteEq filters the iterator items to [Foo] whose [Foo.Byte] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.ByteEq(1)
func (s FooSeq) ByteEq(val byte) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Byte == val && !yield(v) {
                break
            }
        }
    }
}

// ByteEq filters the iterator items to [Foo] whose [Foo.Byte] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.ByteEq(1)
func (s FooSeq2[T]) ByteEq(val byte) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Byte == val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteNe filters the iterator items to [Foo] whose [Foo.Byte] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.ByteNe(1)
func (s FooSlice) ByteNe(val byte) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Byte != val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteNe filters the iterator items to [Foo] whose [Foo.Byte] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.ByteNe(1)
func (m FooMap[T]) ByteNe(val byte) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Byte != val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteNe filters the iterator items to [Foo] whose [Foo.Byte] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.ByteNe(1)
func (s FooSeq) ByteNe(val byte) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Byte != val && !yield(v) {
                break
            }
        }
    }
}

// ByteNe filters the iterator items to [Foo] whose [Foo.Byte] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.ByteNe(1)
func (s FooSeq2[T]) ByteNe(val byte) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Byte != val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteGt filters the iterator items to [Foo] whose [Foo.Byte] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.ByteGt(1)
func (s FooSlice) ByteGt(val byte) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Byte > val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteGt filters the iterator items to [Foo] whose [Foo.Byte] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooMap.ByteGt(1)
func (m FooMap[T]) ByteGt(val byte) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Byte > val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteGt filters the iterator items to [Foo] whose [Foo.Byte] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.ByteGt(1)
func (s FooSeq) ByteGt(val byte) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Byte > val && !yield(v) {
                break
            }
        }
    }
}

// ByteGt filters the iterator items to [Foo] whose [Foo.Byte] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.ByteGt(1)
func (s FooSeq2[T]) ByteGt(val byte) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Byte > val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteLt filters the iterator items to [Foo] whose [Foo.Byte] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.ByteLt(1)
func (s FooSlice) ByteLt(val byte) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Byte < val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteLt filters the iterator items to [Foo] whose [Foo.Byte] is less than the argument.
//
// Example:
//
// 	for k, v := range fooMap.ByteLt(1)
func (m FooMap[T]) ByteLt(val byte) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Byte < val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteLt filters the iterator items to [Foo] whose [Foo.Byte] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.ByteLt(1)
func (s FooSeq) ByteLt(val byte) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Byte < val && !yield(v) {
                break
            }
        }
    }
}

// ByteLt filters the iterator items to [Foo] whose [Foo.Byte] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.ByteLt(1)
func (s FooSeq2[T]) ByteLt(val byte) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Byte < val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteGe filters the iterator items to [Foo] whose [Foo.Byte] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.ByteGe(1)
func (s FooSlice) ByteGe(val byte) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Byte >= val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteGe filters the iterator items to [Foo] whose [Foo.Byte] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.ByteGe(1)
func (m FooMap[T]) ByteGe(val byte) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Byte >= val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteGe filters the iterator items to [Foo] whose [Foo.Byte] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.ByteGe(1)
func (s FooSeq) ByteGe(val byte) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Byte >= val && !yield(v) {
                break
            }
        }
    }
}

// ByteGe filters the iterator items to [Foo] whose [Foo.Byte] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.ByteGe(1)
func (s FooSeq2[T]) ByteGe(val byte) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Byte >= val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteLe filters the iterator items to [Foo] whose [Foo.Byte] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.ByteLe(1)
func (s FooSlice) ByteLe(val byte) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Byte <= val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteLe filters the iterator items to [Foo] whose [Foo.Byte] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.ByteLe(1)
func (m FooMap[T]) ByteLe(val byte) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Byte <= val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteLe filters the iterator items to [Foo] whose [Foo.Byte] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.ByteLe(1)
func (s FooSeq) ByteLe(val byte) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Byte <= val && !yield(v) {
                break
            }
        }
    }
}

// ByteLe filters the iterator items to [Foo] whose [Foo.Byte] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.ByteLe(1)
func (s FooSeq2[T]) ByteLe(val byte) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Byte <= val && !yield(k, v) {
                break
            }
        }
    }
}

// ByteMatches filters the iterator items to [Foo] whose [Foo.Byte] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Byte(func(val byte) bool { return i % 2 == 0 })
func (s FooSlice) ByteMatches(matcher func(byte) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Byte) && !yield(k, v) {
                break
            }
        }
    }
}

// ByteMatches filters the iterator items to [Foo] whose [Foo.Byte] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Byte(func(val byte) bool { return i % 2 == 0 })
func (m FooMap[T]) ByteMatches(matcher func(byte) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Byte) && !yield(k, v) {
                break
            }
        }
    }
}

// ByteMatches filters the iterator items to [Foo] whose [Foo.Byte] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Byte(func(val byte) bool { return i % 2 == 0 })
func (s FooSeq) ByteMatches(matcher func(byte) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Byte) && !yield(v) {
                break
            }
        }
    }
}

// ByteMatches filters the iterator items to [Foo] whose [Foo.Byte] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Byte(func(val byte) bool { return i % 2 == 0 })
func (s FooSeq2[T]) ByteMatches(matcher func(byte) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Byte) && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Eq filters the iterator items to [Foo] whose [Foo.Int8] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int8Eq(1)
func (s FooSlice) Int8Eq(val int8) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int8 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Eq filters the iterator items to [Foo] whose [Foo.Int8] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int8Eq(1)
func (m FooMap[T]) Int8Eq(val int8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int8 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Eq filters the iterator items to [Foo] whose [Foo.Int8] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int8Eq(1)
func (s FooSeq) Int8Eq(val int8) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int8 == val && !yield(v) {
                break
            }
        }
    }
}

// Int8Eq filters the iterator items to [Foo] whose [Foo.Int8] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int8Eq(1)
func (s FooSeq2[T]) Int8Eq(val int8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int8 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Ne filters the iterator items to [Foo] whose [Foo.Int8] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int8Ne(1)
func (s FooSlice) Int8Ne(val int8) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int8 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Ne filters the iterator items to [Foo] whose [Foo.Int8] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int8Ne(1)
func (m FooMap[T]) Int8Ne(val int8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int8 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Ne filters the iterator items to [Foo] whose [Foo.Int8] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int8Ne(1)
func (s FooSeq) Int8Ne(val int8) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int8 != val && !yield(v) {
                break
            }
        }
    }
}

// Int8Ne filters the iterator items to [Foo] whose [Foo.Int8] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int8Ne(1)
func (s FooSeq2[T]) Int8Ne(val int8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int8 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Gt filters the iterator items to [Foo] whose [Foo.Int8] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int8Gt(1)
func (s FooSlice) Int8Gt(val int8) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int8 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Gt filters the iterator items to [Foo] whose [Foo.Int8] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int8Gt(1)
func (m FooMap[T]) Int8Gt(val int8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int8 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Gt filters the iterator items to [Foo] whose [Foo.Int8] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int8Gt(1)
func (s FooSeq) Int8Gt(val int8) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int8 > val && !yield(v) {
                break
            }
        }
    }
}

// Int8Gt filters the iterator items to [Foo] whose [Foo.Int8] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int8Gt(1)
func (s FooSeq2[T]) Int8Gt(val int8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int8 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Lt filters the iterator items to [Foo] whose [Foo.Int8] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int8Lt(1)
func (s FooSlice) Int8Lt(val int8) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int8 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Lt filters the iterator items to [Foo] whose [Foo.Int8] is less than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int8Lt(1)
func (m FooMap[T]) Int8Lt(val int8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int8 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Lt filters the iterator items to [Foo] whose [Foo.Int8] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int8Lt(1)
func (s FooSeq) Int8Lt(val int8) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int8 < val && !yield(v) {
                break
            }
        }
    }
}

// Int8Lt filters the iterator items to [Foo] whose [Foo.Int8] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int8Lt(1)
func (s FooSeq2[T]) Int8Lt(val int8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int8 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Ge filters the iterator items to [Foo] whose [Foo.Int8] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int8Ge(1)
func (s FooSlice) Int8Ge(val int8) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int8 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Ge filters the iterator items to [Foo] whose [Foo.Int8] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int8Ge(1)
func (m FooMap[T]) Int8Ge(val int8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int8 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Ge filters the iterator items to [Foo] whose [Foo.Int8] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int8Ge(1)
func (s FooSeq) Int8Ge(val int8) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int8 >= val && !yield(v) {
                break
            }
        }
    }
}

// Int8Ge filters the iterator items to [Foo] whose [Foo.Int8] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int8Ge(1)
func (s FooSeq2[T]) Int8Ge(val int8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int8 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Le filters the iterator items to [Foo] whose [Foo.Int8] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int8Le(1)
func (s FooSlice) Int8Le(val int8) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int8 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Le filters the iterator items to [Foo] whose [Foo.Int8] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int8Le(1)
func (m FooMap[T]) Int8Le(val int8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int8 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Le filters the iterator items to [Foo] whose [Foo.Int8] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int8Le(1)
func (s FooSeq) Int8Le(val int8) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int8 <= val && !yield(v) {
                break
            }
        }
    }
}

// Int8Le filters the iterator items to [Foo] whose [Foo.Int8] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int8Le(1)
func (s FooSeq2[T]) Int8Le(val int8) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int8 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Matches filters the iterator items to [Foo] whose [Foo.Int8] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int8(func(val int8) bool { return i % 2 == 0 })
func (s FooSlice) Int8Matches(matcher func(int8) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Int8) && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Matches filters the iterator items to [Foo] whose [Foo.Int8] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int8(func(val int8) bool { return i % 2 == 0 })
func (m FooMap[T]) Int8Matches(matcher func(int8) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Int8) && !yield(k, v) {
                break
            }
        }
    }
}

// Int8Matches filters the iterator items to [Foo] whose [Foo.Int8] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int8(func(val int8) bool { return i % 2 == 0 })
func (s FooSeq) Int8Matches(matcher func(int8) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Int8) && !yield(v) {
                break
            }
        }
    }
}

// Int8Matches filters the iterator items to [Foo] whose [Foo.Int8] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int8(func(val int8) bool { return i % 2 == 0 })
func (s FooSeq2[T]) Int8Matches(matcher func(int8) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Int8) && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Eq filters the iterator items to [Foo] whose [Foo.Int16] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int16Eq(1)
func (s FooSlice) Int16Eq(val int16) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int16 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Eq filters the iterator items to [Foo] whose [Foo.Int16] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int16Eq(1)
func (m FooMap[T]) Int16Eq(val int16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int16 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Eq filters the iterator items to [Foo] whose [Foo.Int16] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int16Eq(1)
func (s FooSeq) Int16Eq(val int16) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int16 == val && !yield(v) {
                break
            }
        }
    }
}

// Int16Eq filters the iterator items to [Foo] whose [Foo.Int16] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int16Eq(1)
func (s FooSeq2[T]) Int16Eq(val int16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int16 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Ne filters the iterator items to [Foo] whose [Foo.Int16] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int16Ne(1)
func (s FooSlice) Int16Ne(val int16) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int16 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Ne filters the iterator items to [Foo] whose [Foo.Int16] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int16Ne(1)
func (m FooMap[T]) Int16Ne(val int16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int16 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Ne filters the iterator items to [Foo] whose [Foo.Int16] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int16Ne(1)
func (s FooSeq) Int16Ne(val int16) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int16 != val && !yield(v) {
                break
            }
        }
    }
}

// Int16Ne filters the iterator items to [Foo] whose [Foo.Int16] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int16Ne(1)
func (s FooSeq2[T]) Int16Ne(val int16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int16 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Gt filters the iterator items to [Foo] whose [Foo.Int16] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int16Gt(1)
func (s FooSlice) Int16Gt(val int16) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int16 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Gt filters the iterator items to [Foo] whose [Foo.Int16] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int16Gt(1)
func (m FooMap[T]) Int16Gt(val int16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int16 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Gt filters the iterator items to [Foo] whose [Foo.Int16] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int16Gt(1)
func (s FooSeq) Int16Gt(val int16) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int16 > val && !yield(v) {
                break
            }
        }
    }
}

// Int16Gt filters the iterator items to [Foo] whose [Foo.Int16] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int16Gt(1)
func (s FooSeq2[T]) Int16Gt(val int16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int16 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Lt filters the iterator items to [Foo] whose [Foo.Int16] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int16Lt(1)
func (s FooSlice) Int16Lt(val int16) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int16 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Lt filters the iterator items to [Foo] whose [Foo.Int16] is less than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int16Lt(1)
func (m FooMap[T]) Int16Lt(val int16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int16 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Lt filters the iterator items to [Foo] whose [Foo.Int16] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int16Lt(1)
func (s FooSeq) Int16Lt(val int16) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int16 < val && !yield(v) {
                break
            }
        }
    }
}

// Int16Lt filters the iterator items to [Foo] whose [Foo.Int16] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int16Lt(1)
func (s FooSeq2[T]) Int16Lt(val int16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int16 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Ge filters the iterator items to [Foo] whose [Foo.Int16] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int16Ge(1)
func (s FooSlice) Int16Ge(val int16) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int16 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Ge filters the iterator items to [Foo] whose [Foo.Int16] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int16Ge(1)
func (m FooMap[T]) Int16Ge(val int16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int16 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Ge filters the iterator items to [Foo] whose [Foo.Int16] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int16Ge(1)
func (s FooSeq) Int16Ge(val int16) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int16 >= val && !yield(v) {
                break
            }
        }
    }
}

// Int16Ge filters the iterator items to [Foo] whose [Foo.Int16] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int16Ge(1)
func (s FooSeq2[T]) Int16Ge(val int16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int16 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Le filters the iterator items to [Foo] whose [Foo.Int16] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int16Le(1)
func (s FooSlice) Int16Le(val int16) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int16 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Le filters the iterator items to [Foo] whose [Foo.Int16] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int16Le(1)
func (m FooMap[T]) Int16Le(val int16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int16 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Le filters the iterator items to [Foo] whose [Foo.Int16] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int16Le(1)
func (s FooSeq) Int16Le(val int16) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int16 <= val && !yield(v) {
                break
            }
        }
    }
}

// Int16Le filters the iterator items to [Foo] whose [Foo.Int16] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int16Le(1)
func (s FooSeq2[T]) Int16Le(val int16) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int16 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Matches filters the iterator items to [Foo] whose [Foo.Int16] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int16(func(val int16) bool { return i % 2 == 0 })
func (s FooSlice) Int16Matches(matcher func(int16) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Int16) && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Matches filters the iterator items to [Foo] whose [Foo.Int16] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int16(func(val int16) bool { return i % 2 == 0 })
func (m FooMap[T]) Int16Matches(matcher func(int16) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Int16) && !yield(k, v) {
                break
            }
        }
    }
}

// Int16Matches filters the iterator items to [Foo] whose [Foo.Int16] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int16(func(val int16) bool { return i % 2 == 0 })
func (s FooSeq) Int16Matches(matcher func(int16) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Int16) && !yield(v) {
                break
            }
        }
    }
}

// Int16Matches filters the iterator items to [Foo] whose [Foo.Int16] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int16(func(val int16) bool { return i % 2 == 0 })
func (s FooSeq2[T]) Int16Matches(matcher func(int16) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Int16) && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Eq filters the iterator items to [Foo] whose [Foo.Int32] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int32Eq(1)
func (s FooSlice) Int32Eq(val int32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int32 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Eq filters the iterator items to [Foo] whose [Foo.Int32] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int32Eq(1)
func (m FooMap[T]) Int32Eq(val int32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int32 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Eq filters the iterator items to [Foo] whose [Foo.Int32] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int32Eq(1)
func (s FooSeq) Int32Eq(val int32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int32 == val && !yield(v) {
                break
            }
        }
    }
}

// Int32Eq filters the iterator items to [Foo] whose [Foo.Int32] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int32Eq(1)
func (s FooSeq2[T]) Int32Eq(val int32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int32 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Ne filters the iterator items to [Foo] whose [Foo.Int32] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int32Ne(1)
func (s FooSlice) Int32Ne(val int32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int32 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Ne filters the iterator items to [Foo] whose [Foo.Int32] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int32Ne(1)
func (m FooMap[T]) Int32Ne(val int32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int32 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Ne filters the iterator items to [Foo] whose [Foo.Int32] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int32Ne(1)
func (s FooSeq) Int32Ne(val int32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int32 != val && !yield(v) {
                break
            }
        }
    }
}

// Int32Ne filters the iterator items to [Foo] whose [Foo.Int32] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int32Ne(1)
func (s FooSeq2[T]) Int32Ne(val int32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int32 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Gt filters the iterator items to [Foo] whose [Foo.Int32] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int32Gt(1)
func (s FooSlice) Int32Gt(val int32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int32 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Gt filters the iterator items to [Foo] whose [Foo.Int32] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int32Gt(1)
func (m FooMap[T]) Int32Gt(val int32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int32 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Gt filters the iterator items to [Foo] whose [Foo.Int32] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int32Gt(1)
func (s FooSeq) Int32Gt(val int32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int32 > val && !yield(v) {
                break
            }
        }
    }
}

// Int32Gt filters the iterator items to [Foo] whose [Foo.Int32] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int32Gt(1)
func (s FooSeq2[T]) Int32Gt(val int32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int32 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Lt filters the iterator items to [Foo] whose [Foo.Int32] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int32Lt(1)
func (s FooSlice) Int32Lt(val int32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int32 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Lt filters the iterator items to [Foo] whose [Foo.Int32] is less than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int32Lt(1)
func (m FooMap[T]) Int32Lt(val int32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int32 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Lt filters the iterator items to [Foo] whose [Foo.Int32] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int32Lt(1)
func (s FooSeq) Int32Lt(val int32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int32 < val && !yield(v) {
                break
            }
        }
    }
}

// Int32Lt filters the iterator items to [Foo] whose [Foo.Int32] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int32Lt(1)
func (s FooSeq2[T]) Int32Lt(val int32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int32 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Ge filters the iterator items to [Foo] whose [Foo.Int32] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int32Ge(1)
func (s FooSlice) Int32Ge(val int32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int32 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Ge filters the iterator items to [Foo] whose [Foo.Int32] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int32Ge(1)
func (m FooMap[T]) Int32Ge(val int32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int32 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Ge filters the iterator items to [Foo] whose [Foo.Int32] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int32Ge(1)
func (s FooSeq) Int32Ge(val int32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int32 >= val && !yield(v) {
                break
            }
        }
    }
}

// Int32Ge filters the iterator items to [Foo] whose [Foo.Int32] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int32Ge(1)
func (s FooSeq2[T]) Int32Ge(val int32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int32 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Le filters the iterator items to [Foo] whose [Foo.Int32] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int32Le(1)
func (s FooSlice) Int32Le(val int32) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int32 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Le filters the iterator items to [Foo] whose [Foo.Int32] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int32Le(1)
func (m FooMap[T]) Int32Le(val int32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int32 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Le filters the iterator items to [Foo] whose [Foo.Int32] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int32Le(1)
func (s FooSeq) Int32Le(val int32) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int32 <= val && !yield(v) {
                break
            }
        }
    }
}

// Int32Le filters the iterator items to [Foo] whose [Foo.Int32] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int32Le(1)
func (s FooSeq2[T]) Int32Le(val int32) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int32 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Matches filters the iterator items to [Foo] whose [Foo.Int32] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int32(func(val int32) bool { return i % 2 == 0 })
func (s FooSlice) Int32Matches(matcher func(int32) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Int32) && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Matches filters the iterator items to [Foo] whose [Foo.Int32] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int32(func(val int32) bool { return i % 2 == 0 })
func (m FooMap[T]) Int32Matches(matcher func(int32) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Int32) && !yield(k, v) {
                break
            }
        }
    }
}

// Int32Matches filters the iterator items to [Foo] whose [Foo.Int32] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int32(func(val int32) bool { return i % 2 == 0 })
func (s FooSeq) Int32Matches(matcher func(int32) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Int32) && !yield(v) {
                break
            }
        }
    }
}

// Int32Matches filters the iterator items to [Foo] whose [Foo.Int32] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int32(func(val int32) bool { return i % 2 == 0 })
func (s FooSeq2[T]) Int32Matches(matcher func(int32) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Int32) && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Eq filters the iterator items to [Foo] whose [Foo.Int64] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int64Eq(1)
func (s FooSlice) Int64Eq(val int64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int64 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Eq filters the iterator items to [Foo] whose [Foo.Int64] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int64Eq(1)
func (m FooMap[T]) Int64Eq(val int64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int64 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Eq filters the iterator items to [Foo] whose [Foo.Int64] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int64Eq(1)
func (s FooSeq) Int64Eq(val int64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int64 == val && !yield(v) {
                break
            }
        }
    }
}

// Int64Eq filters the iterator items to [Foo] whose [Foo.Int64] is equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int64Eq(1)
func (s FooSeq2[T]) Int64Eq(val int64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int64 == val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Ne filters the iterator items to [Foo] whose [Foo.Int64] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int64Ne(1)
func (s FooSlice) Int64Ne(val int64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int64 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Ne filters the iterator items to [Foo] whose [Foo.Int64] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int64Ne(1)
func (m FooMap[T]) Int64Ne(val int64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int64 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Ne filters the iterator items to [Foo] whose [Foo.Int64] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int64Ne(1)
func (s FooSeq) Int64Ne(val int64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int64 != val && !yield(v) {
                break
            }
        }
    }
}

// Int64Ne filters the iterator items to [Foo] whose [Foo.Int64] is not equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int64Ne(1)
func (s FooSeq2[T]) Int64Ne(val int64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int64 != val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Gt filters the iterator items to [Foo] whose [Foo.Int64] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int64Gt(1)
func (s FooSlice) Int64Gt(val int64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int64 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Gt filters the iterator items to [Foo] whose [Foo.Int64] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int64Gt(1)
func (m FooMap[T]) Int64Gt(val int64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int64 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Gt filters the iterator items to [Foo] whose [Foo.Int64] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int64Gt(1)
func (s FooSeq) Int64Gt(val int64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int64 > val && !yield(v) {
                break
            }
        }
    }
}

// Int64Gt filters the iterator items to [Foo] whose [Foo.Int64] is greater than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int64Gt(1)
func (s FooSeq2[T]) Int64Gt(val int64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int64 > val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Lt filters the iterator items to [Foo] whose [Foo.Int64] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int64Lt(1)
func (s FooSlice) Int64Lt(val int64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int64 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Lt filters the iterator items to [Foo] whose [Foo.Int64] is less than the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int64Lt(1)
func (m FooMap[T]) Int64Lt(val int64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int64 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Lt filters the iterator items to [Foo] whose [Foo.Int64] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int64Lt(1)
func (s FooSeq) Int64Lt(val int64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int64 < val && !yield(v) {
                break
            }
        }
    }
}

// Int64Lt filters the iterator items to [Foo] whose [Foo.Int64] is less than the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int64Lt(1)
func (s FooSeq2[T]) Int64Lt(val int64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int64 < val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Ge filters the iterator items to [Foo] whose [Foo.Int64] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int64Ge(1)
func (s FooSlice) Int64Ge(val int64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int64 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Ge filters the iterator items to [Foo] whose [Foo.Int64] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int64Ge(1)
func (m FooMap[T]) Int64Ge(val int64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int64 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Ge filters the iterator items to [Foo] whose [Foo.Int64] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int64Ge(1)
func (s FooSeq) Int64Ge(val int64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int64 >= val && !yield(v) {
                break
            }
        }
    }
}

// Int64Ge filters the iterator items to [Foo] whose [Foo.Int64] is greater than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int64Ge(1)
func (s FooSeq2[T]) Int64Ge(val int64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int64 >= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Le filters the iterator items to [Foo] whose [Foo.Int64] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int64Le(1)
func (s FooSlice) Int64Le(val int64) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if v.Int64 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Le filters the iterator items to [Foo] whose [Foo.Int64] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int64Le(1)
func (m FooMap[T]) Int64Le(val int64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if v.Int64 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Le filters the iterator items to [Foo] whose [Foo.Int64] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int64Le(1)
func (s FooSeq) Int64Le(val int64) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if v.Int64 <= val && !yield(v) {
                break
            }
        }
    }
}

// Int64Le filters the iterator items to [Foo] whose [Foo.Int64] is less than or equal to the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int64Le(1)
func (s FooSeq2[T]) Int64Le(val int64) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if v.Int64 <= val && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Matches filters the iterator items to [Foo] whose [Foo.Int64] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Int64(func(val int64) bool { return i % 2 == 0 })
func (s FooSlice) Int64Matches(matcher func(int64) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Int64) && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Matches filters the iterator items to [Foo] whose [Foo.Int64] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Int64(func(val int64) bool { return i % 2 == 0 })
func (m FooMap[T]) Int64Matches(matcher func(int64) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Int64) && !yield(k, v) {
                break
            }
        }
    }
}

// Int64Matches filters the iterator items to [Foo] whose [Foo.Int64] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Int64(func(val int64) bool { return i % 2 == 0 })
func (s FooSeq) Int64Matches(matcher func(int64) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Int64) && !yield(v) {
                break
            }
        }
    }
}

// Int64Matches filters the iterator items to [Foo] whose [Foo.Int64] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Int64(func(val int64) bool { return i % 2 == 0 })
func (s FooSeq2[T]) Int64Matches(matcher func(int64) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Int64) && !yield(k, v) {
                break
            }
        }
    }
}
// Complex64Matches filters the iterator items to [Foo] whose [Foo.Complex64] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Complex64(func(v complex64) bool { return true })
func (s FooSlice) Complex64Matches(matcher func(complex64) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Complex64) && !yield(k, v) {
                break
            }
        }
    }
}

// Complex64Matches filters the iterator items to [Foo] whose [Foo.Complex64] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Complex64(func(v complex64) bool { return true })
func (m FooMap[T]) Complex64Matches(matcher func(complex64) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Complex64) && !yield(k, v) {
                break
            }
        }
    }
}

// Complex64Matches filters the iterator items to [Foo] whose [Foo.Complex64] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Complex64(func(v complex64) bool { return true })
func (s FooSeq) Complex64Matches(matcher func(complex64) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Complex64) && !yield(v) {
                break
            }
        }
    }
}

// Complex64Matches filters the iterator items to [Foo] whose [Foo.Complex64] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Complex64(func(v complex64) bool { return true })
func (s FooSeq2[T]) Complex64Matches(matcher func(complex64) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Complex64) && !yield(k, v) {
                break
            }
        }
    }
}
// Complex128Matches filters the iterator items to [Foo] whose [Foo.Complex128] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Complex128(func(v complex128) bool { return true })
func (s FooSlice) Complex128Matches(matcher func(complex128) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Complex128) && !yield(k, v) {
                break
            }
        }
    }
}

// Complex128Matches filters the iterator items to [Foo] whose [Foo.Complex128] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Complex128(func(v complex128) bool { return true })
func (m FooMap[T]) Complex128Matches(matcher func(complex128) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Complex128) && !yield(k, v) {
                break
            }
        }
    }
}

// Complex128Matches filters the iterator items to [Foo] whose [Foo.Complex128] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Complex128(func(v complex128) bool { return true })
func (s FooSeq) Complex128Matches(matcher func(complex128) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Complex128) && !yield(v) {
                break
            }
        }
    }
}

// Complex128Matches filters the iterator items to [Foo] whose [Foo.Complex128] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Complex128(func(v complex128) bool { return true })
func (s FooSeq2[T]) Complex128Matches(matcher func(complex128) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Complex128) && !yield(k, v) {
                break
            }
        }
    }
}

// ErrorIs filters the iterator items to [Foo] whose [Foo.Error] returns true in [errors.Is].
//
// Example:
//
// 	for k, v := range fooSlice.ErrorIs(io.EOF)
func (s FooSlice) ErrorIs(err error) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if errors.Is(v.Error, err) && !yield(k, v) {
                break
            }
        }
    }
}

// ErrorIs filters the iterator items to [Foo] whose [Foo.Error] returns true in [errors.Is].
//
// Example:
//
// 	for k, v := range fooMap.ErrorIs(io.EOF)
func (m FooMap[T]) ErrorIs(err error) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if errors.Is(v.Error, err) && !yield(k, v) {
                break
            }
        }
    }
}

// ErrorIs filters the iterator items to [Foo] whose [Foo.Error] returns true in [errors.Is].
//
// Example:
//
// 	for k, v := range fooSeq.ErrorIs(io.EOF)
func (s FooSeq) ErrorIs(err error) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if errors.Is(v.Error, err) && !yield(v) {
                break
            }
        }
    }
}

// ErrorIs filters the iterator items to [Foo] whose [Foo.Error] returns true in [errors.Is].
//
// Example:
//
// 	for k, v := range fooSeq2.ErrorIs(io.EOF)
func (s FooSeq2[T]) ErrorIs(err error) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if errors.Is(v.Error, err) && !yield(k, v) {
                break
            }
        }
    }
}

// ErrorIsnt filters the iterator items to [Foo] whose [Foo.Error] returns false in [errors.Is].
//
// Example:
//
// 	for k, v := range fooSlice.ErrorIsnt(io.EOF)
func (s FooSlice) ErrorIsnt(err error) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if !errors.Is(v.Error, err) && !yield(k, v) {
                break
            }
        }
    }
}

// ErrorIsnt filters the iterator items to [Foo] whose [Foo.Error] returns false in [errors.Is].
//
// Example:
//
// 	for k, v := range fooMap.ErrorIsnt(io.EOF)
func (m FooMap[T]) ErrorIsnt(err error) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if !errors.Is(v.Error, err) && !yield(k, v) {
                break
            }
        }
    }
}

// ErrorIsnt filters the iterator items to [Foo] whose [Foo.Error] returns false in [errors.Is].
//
// Example:
//
// 	for k, v := range fooSeq.ErrorIsnt(io.EOF)
func (s FooSeq) ErrorIsnt(err error) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if !errors.Is(v.Error, err) && !yield(v) {
                break
            }
        }
    }
}

// ErrorIsnt filters the iterator items to [Foo] whose [Foo.Error] returns false in [errors.Is].
//
// Example:
//
// 	for k, v := range fooSeq2.ErrorIsnt(io.EOF)
func (s FooSeq2[T]) ErrorIsnt(err error) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if !errors.Is(v.Error, err) && !yield(k, v) {
                break
            }
        }
    }
}

// ErrorMatches filters the iterator items to [Foo] whose [Foo.Error] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Error(func(e error) bool { return true })
func (s FooSlice) ErrorMatches(matcher func(error) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Error) && !yield(k, v) {
                break
            }
        }
    }
}

// ErrorMatches filters the iterator items to [Foo] whose [Foo.Error] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Error(func(e error) bool { return true })
func (m FooMap[T]) ErrorMatches(matcher func(error) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Error) && !yield(k, v) {
                break
            }
        }
    }
}

// ErrorMatches filters the iterator items to [Foo] whose [Foo.Error] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Error(func(e error) bool { return true })
func (s FooSeq) ErrorMatches(matcher func(error) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Error) && !yield(v) {
                break
            }
        }
    }
}

// ErrorMatches filters the iterator items to [Foo] whose [Foo.Error] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Error(func(e error) bool { return true })
func (s FooSeq2[T]) ErrorMatches(matcher func(error) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Error) && !yield(k, v) {
                break
            }
        }
    }
}
// BarMatches filters the iterator items to [Foo] whose [Foo.Bar] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Bar(func(v bar.Bar) bool { return true })
func (s FooSlice) BarMatches(matcher func(bar.Bar) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Bar) && !yield(k, v) {
                break
            }
        }
    }
}

// BarMatches filters the iterator items to [Foo] whose [Foo.Bar] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Bar(func(v bar.Bar) bool { return true })
func (m FooMap[T]) BarMatches(matcher func(bar.Bar) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Bar) && !yield(k, v) {
                break
            }
        }
    }
}

// BarMatches filters the iterator items to [Foo] whose [Foo.Bar] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Bar(func(v bar.Bar) bool { return true })
func (s FooSeq) BarMatches(matcher func(bar.Bar) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Bar) && !yield(v) {
                break
            }
        }
    }
}

// BarMatches filters the iterator items to [Foo] whose [Foo.Bar] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Bar(func(v bar.Bar) bool { return true })
func (s FooSeq2[T]) BarMatches(matcher func(bar.Bar) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Bar) && !yield(k, v) {
                break
            }
        }
    }
}
// TimeMatches filters the iterator items to [Foo] whose [Foo.Time] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.Time(func(v time.Time) bool { return true })
func (s FooSlice) TimeMatches(matcher func(time.Time) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.Time) && !yield(k, v) {
                break
            }
        }
    }
}

// TimeMatches filters the iterator items to [Foo] whose [Foo.Time] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.Time(func(v time.Time) bool { return true })
func (m FooMap[T]) TimeMatches(matcher func(time.Time) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.Time) && !yield(k, v) {
                break
            }
        }
    }
}

// TimeMatches filters the iterator items to [Foo] whose [Foo.Time] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.Time(func(v time.Time) bool { return true })
func (s FooSeq) TimeMatches(matcher func(time.Time) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.Time) && !yield(v) {
                break
            }
        }
    }
}

// TimeMatches filters the iterator items to [Foo] whose [Foo.Time] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.Time(func(v time.Time) bool { return true })
func (s FooSeq2[T]) TimeMatches(matcher func(time.Time) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.Time) && !yield(k, v) {
                break
            }
        }
    }
}
// NullStringMatches filters the iterator items to [Foo] whose [Foo.NullString] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSlice.NullString(func(v s.NullString) bool { return true })
func (s FooSlice) NullStringMatches(matcher func(s.NullString) bool) FooSeq2[int] {
    return func(yield func(int, Foo) bool) {
        for k, v := range s {
            if matcher(v.NullString) && !yield(k, v) {
                break
            }
        }
    }
}

// NullStringMatches filters the iterator items to [Foo] whose [Foo.NullString] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooMap.NullString(func(v s.NullString) bool { return true })
func (m FooMap[T]) NullStringMatches(matcher func(s.NullString) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range m {
            if matcher(v.NullString) && !yield(k, v) {
                break
            }
        }
    }
}

// NullStringMatches filters the iterator items to [Foo] whose [Foo.NullString] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq.NullString(func(v s.NullString) bool { return true })
func (s FooSeq) NullStringMatches(matcher func(s.NullString) bool) FooSeq {
    return func(yield func(Foo) bool) {
        for v := range s {
            if matcher(v.NullString) && !yield(v) {
                break
            }
        }
    }
}

// NullStringMatches filters the iterator items to [Foo] whose [Foo.NullString] matches the condition of the argument.
//
// Example:
//
// 	for k, v := range fooSeq2.NullString(func(v s.NullString) bool { return true })
func (s FooSeq2[T]) NullStringMatches(matcher func(s.NullString) bool) FooSeq2[T] {
    return func(yield func(T, Foo) bool) {
        for k, v := range s {
            if matcher(v.NullString) && !yield(k, v) {
                break
            }
        }
    }
}

// BazSlice is a defined-type of []User.
// If a filter is to be performed, a cast to this type is necessary.
//
// Example:
//
//  BazSlice([]Baz{}).FooEq("bar").
type BazSlice []Baz

// BazMap is a defined-type of []Baz.
// If a filter is to be performed, a cast to this type is necessary.
//
// Example:
//
//  BazMap(map[string]Baz{}).FooEq("bar").
type BazMap[T comparable] map[T]Baz

// BazSeq is a defined-type of iter.Seq[Baz].
// If a filter is to be performed, a cast to this type is necessary.
//
// Example:
//
//  BazSeq(iter.Seq[Baz](nil)).FooEq("bar").
type BazSeq iter.Seq[Baz]

// BazSeq2 is a defined-type of iter.Seq2[T any, Baz].
// If a filter is to be performed, a cast to this type is necessary.
//
// Example:
//
//  BazSeq2(iter.Seq2[string, Baz](nil)).FooEq("bar").
type BazSeq2[T any] iter.Seq2[T, Baz]

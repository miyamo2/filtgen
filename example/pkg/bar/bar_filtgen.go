// Code generated by filtgen; DO NOT EDIT.
package bar

import (
	"iter"
	"strings"
)

// BarSlice is a defined-type of []User.
// If a filter is to be performed, a cast to this type is necessary.
//
// Example:
//
//	BarSlice([]Bar{}).FooEq("bar").
type BarSlice []Bar

// BarMap is a defined-type of []Bar.
// If a filter is to be performed, a cast to this type is necessary.
//
// Example:
//
//	BarMap(map[string]Bar{}).FooEq("bar").
type BarMap[T comparable] map[T]Bar

// BarSeq is a defined-type of iter.Seq[Bar].
// If a filter is to be performed, a cast to this type is necessary.
//
// Example:
//
//	BarSeq(iter.Seq[Bar](nil)).FooEq("bar").
type BarSeq iter.Seq[Bar]

// BarSeq2 is a defined-type of iter.Seq2[T any, Bar].
// If a filter is to be performed, a cast to this type is necessary.
//
// Example:
//
//	BarSeq2(iter.Seq2[string, Bar](nil)).FooEq("bar").
type BarSeq2[T any] iter.Seq2[T, Bar]

// StringEq filters the iterator items to [Bar] whose [Bar.String] is equal to the argument.
//
// Example:
//
//	for k, v := range barSlice.StringEq("foo")
func (s BarSlice) StringEq(str string) BarSeq2[int] {
	return func(yield func(int, Bar) bool) {
		for k, v := range s {
			if strings.Compare(v.String, str) == 0 && !yield(k, v) {
				break
			}
		}
	}
}

// StringEq filters the iterator items to [Bar] whose [Bar.String] is equal to the argument.
//
// Example:
//
//	for k, v := range barMap.StringEq("foo")
func (m BarMap[T]) StringEq(str string) BarSeq2[T] {
	return func(yield func(T, Bar) bool) {
		for k, v := range m {
			if strings.Compare(v.String, str) == 0 && !yield(k, v) {
				break
			}
		}
	}
}

// StringEq filters the iterator items to [Bar] whose [Bar.String] is equal to the argument.
//
// Example:
//
//	for k, v := range barSeq.StringEq("foo")
func (s BarSeq) StringEq(str string) iter.Seq[Bar] {
	return func(yield func(Bar) bool) {
		for v := range s {
			if strings.Compare(v.String, str) == 0 && !yield(v) {
				break
			}
		}
	}
}

// StringEq filters the iterator items to [Bar] whose [Bar.String] is equal to the argument.
//
// Example:
//
//	for k, v := range barSeq2.StringEq("foo")
func (s BarSeq2[T]) StringEq(str string) BarSeq2[T] {
	return func(yield func(T, Bar) bool) {
		for k, v := range s {
			if strings.Compare(v.String, str) == 0 && !yield(k, v) {
				break
			}
		}
	}
}

// StringNe filters the iterator items to [Bar] whose [Bar.String] is not equal to the argument.
//
// Example:
//
//	for k, v := range barSlice.StringNe("foo")
func (s BarSlice) StringNe(str string) BarSeq2[int] {
	return func(yield func(int, Bar) bool) {
		for k, v := range s {
			if strings.Compare(v.String, str) != 0 && !yield(k, v) {
				break
			}
		}
	}
}

// StringNe filters the iterator items to [Bar] whose [Bar.String] is not equal to the argument.
//
// Example:
//
//	for k, v := range barMap.StringNe("foo")
func (m BarMap[T]) StringNe(str string) BarSeq2[T] {
	return func(yield func(T, Bar) bool) {
		for k, v := range m {
			if strings.Compare(v.String, str) != 0 && !yield(k, v) {
				break
			}
		}
	}
}

// StringNe filters the iterator items to [Bar] whose [Bar.String] is not equal to the argument.
//
// Example:
//
//	for k, v := range barSeq.StringNe("foo")
func (s BarSeq) StringNe(str string) BarSeq {
	return func(yield func(Bar) bool) {
		for v := range s {
			if strings.Compare(v.String, str) != 0 && !yield(v) {
				break
			}
		}
	}
}

// StringNe filters the iterator items to [Bar] whose [Bar.String] is not equal to the argument.
//
// Example:
//
//	for k, v := range barSeq2.StringNe("foo")
func (s BarSeq2[T]) StringNe(str string) BarSeq2[T] {
	return func(yield func(T, Bar) bool) {
		for k, v := range s {
			if strings.Compare(v.String, str) != 0 && !yield(k, v) {
				break
			}
		}
	}
}

// StringGt filters the iterator items to [Bar] whose [Bar.String] is greater than the argument.
//
// Example:
//
//	for k, v := range barSlice.StringGt("foo")
func (s BarSlice) StringGt(str string) BarSeq2[int] {
	return func(yield func(int, Bar) bool) {
		for k, v := range s {
			if strings.Compare(v.String, str) == 1 && !yield(k, v) {
				break
			}
		}
	}
}

// StringGt filters the iterator items to [Bar] whose [Bar.String] is greater than the argument.
//
// Example:
//
//	for k, v := range barMap.StringGt("foo")
func (m BarMap[T]) StringGt(str string) BarSeq2[T] {
	return func(yield func(T, Bar) bool) {
		for k, v := range m {
			if strings.Compare(v.String, str) == 1 && !yield(k, v) {
				break
			}
		}
	}
}

// StringGt filters the iterator items to [Bar] whose [Bar.String] is greater than the argument.
//
// Example:
//
//	for k, v := range barSeq.StringGt("foo")
func (s BarSeq) StringGt(str string) BarSeq {
	return func(yield func(Bar) bool) {
		for v := range s {
			if strings.Compare(v.String, str) == 1 && !yield(v) {
				break
			}
		}
	}
}

// StringGt filters the iterator items to [Bar] whose [Bar.String] is greater than the argument.
//
// Example:
//
//	for k, v := range barSeq2.StringGt("foo")
func (s BarSeq2[T]) StringGt(str string) BarSeq2[T] {
	return func(yield func(T, Bar) bool) {
		for k, v := range s {
			if strings.Compare(v.String, str) == 1 && !yield(k, v) {
				break
			}
		}
	}
}

// StringLt filters the iterator items to [Bar] whose [Bar.String] is less than the argument.
//
// Example:
//
//	for k, v := range barSlice.StringLt("foo")
func (s BarSlice) StringLt(str string) BarSeq2[int] {
	return func(yield func(int, Bar) bool) {
		for k, v := range s {
			if strings.Compare(v.String, str) == -1 && !yield(k, v) {
				break
			}
		}
	}
}

// StringLt filters the iterator items to [Bar] whose [Bar.String] is less than the argument.
//
// Example:
//
//	for k, v := range barMap.StringLt("foo")
func (m BarMap[T]) StringLt(str string) BarSeq2[T] {
	return func(yield func(T, Bar) bool) {
		for k, v := range m {
			if strings.Compare(v.String, str) == -1 && !yield(k, v) {
				break
			}
		}
	}
}

// StringLt filters the iterator items to [Bar] whose [Bar.String] is less than the argument.
//
// Example:
//
//	for k, v := range barSeq.StringLt("foo")
func (s BarSeq) StringLt(str string) BarSeq {
	return func(yield func(Bar) bool) {
		for v := range s {
			if strings.Compare(v.String, str) == -1 && !yield(v) {
				break
			}
		}
	}
}

// StringLt filters the iterator items to [Bar] whose [Bar.String] is less than the argument.
//
// Example:
//
//	for k, v := range barSeq2.StringLt("foo")
func (s BarSeq2[T]) StringLt(str string) BarSeq2[T] {
	return func(yield func(T, Bar) bool) {
		for k, v := range s {
			if strings.Compare(v.String, str) == -1 && !yield(k, v) {
				break
			}
		}
	}
}

// StringGe filters the iterator items to [Bar] whose [Bar.String] is greater than or equal to the argument.
//
// Example:
//
//	for k, v := range barSlice.StringGe("foo")
func (s BarSlice) StringGe(str string) BarSeq2[int] {
	return func(yield func(int, Bar) bool) {
		for k, v := range s {
			if strings.Compare(v.String, str) >= 0 && !yield(k, v) {
				break
			}
		}
	}
}

// StringGe filters the iterator items to [Bar] whose [Bar.String] is greater than or equal to the argument.
//
// Example:
//
//	for k, v := range barMap.StringGe("foo")
func (m BarMap[T]) StringGe(str string) BarSeq2[T] {
	return func(yield func(T, Bar) bool) {
		for k, v := range m {
			if strings.Compare(v.String, str) >= 0 && !yield(k, v) {
				break
			}
		}
	}
}

// StringGe filters the iterator items to [Bar] whose [Bar.String] is greater than or equal to the argument.
//
// Example:
//
//	for k, v := range barSeq.StringGe("foo")
func (s BarSeq) StringGe(str string) BarSeq {
	return func(yield func(Bar) bool) {
		for v := range s {
			if strings.Compare(v.String, str) >= 0 && !yield(v) {
				break
			}
		}
	}
}

// StringGe filters the iterator items to [Bar] whose [Bar.String] is greater than or equal to the argument.
//
// Example:
//
//	for k, v := range barSeq2.StringGe("foo")
func (s BarSeq2[T]) StringGe(str string) BarSeq2[T] {
	return func(yield func(T, Bar) bool) {
		for k, v := range s {
			if strings.Compare(v.String, str) >= 0 && !yield(k, v) {
				break
			}
		}
	}
}

// StringLe filters the iterator items to [Bar] whose [Bar.String] is less than or equal to the argument.
//
// Example:
//
//	for k, v := range barSlice.StringLe("foo")
func (s BarSlice) StringLe(str string) BarSeq2[int] {
	return func(yield func(int, Bar) bool) {
		for k, v := range s {
			if strings.Compare(v.String, str) <= 0 && !yield(k, v) {
				break
			}
		}
	}
}

// StringLe filters the iterator items to [Bar] whose [Bar.String] is less than or equal to the argument.
//
// Example:
//
//	for k, v := range barMap.StringLe("foo")
func (m BarMap[T]) StringLe(str string) BarSeq2[T] {
	return func(yield func(T, Bar) bool) {
		for k, v := range m {
			if strings.Compare(v.String, str) <= 0 && !yield(k, v) {
				break
			}
		}
	}
}

// StringLe filters the iterator items to [Bar] whose [Bar.String] is less than or equal to the argument.
//
// Example:
//
//	for k, v := range barSeq.StringLe("foo")
func (s BarSeq) StringLe(str string) BarSeq {
	return func(yield func(Bar) bool) {
		for v := range s {
			if strings.Compare(v.String, str) <= 0 && !yield(v) {
				break
			}
		}
	}
}

// StringLe filters the iterator items to [Bar] whose [Bar.String] is less than or equal to the argument.
//
// Example:
//
//	for k, v := range barSeq2.StringLe("foo")
func (s BarSeq2[T]) StringLe(str string) BarSeq2[T] {
	return func(yield func(T, Bar) bool) {
		for k, v := range s {
			if strings.Compare(v.String, str) <= 0 && !yield(k, v) {
				break
			}
		}
	}
}

// StringMatches filters the iterator items to [Bar] whose [Bar.String] matches the condition of the argument.
//
// Example:
//
//	for k, v := range barSlice.String(func(str string) bool { return strings.Contains(str, "foo") })
func (s BarSlice) StringMatches(matcher func(string) bool) BarSeq2[int] {
	return func(yield func(int, Bar) bool) {
		for k, v := range s {
			if matcher(v.String) && !yield(k, v) {
				break
			}
		}
	}
}

// StringMatches filters the iterator items to [Bar] whose [Bar.String] matches the condition of the argument.
//
// Example:
//
//	for k, v := range barMap.String(func(str string) bool { return strings.Contains(str, "foo") })
func (m BarMap[T]) StringMatches(matcher func(string) bool) BarSeq2[T] {
	return func(yield func(T, Bar) bool) {
		for k, v := range m {
			if matcher(v.String) && !yield(k, v) {
				break
			}
		}
	}
}

// StringMatches filters the iterator items to [Bar] whose [Bar.String] matches the condition of the argument.
//
// Example:
//
//	for k, v := range barSeq.String(func(str string) bool { return strings.Contains(str, "foo") })
func (s BarSeq) StringMatches(matcher func(string) bool) BarSeq {
	return func(yield func(Bar) bool) {
		for v := range s {
			if matcher(v.String) && !yield(v) {
				break
			}
		}
	}
}

// StringMatches filters the iterator items to [Bar] whose [Bar.String] matches the condition of the argument.
//
// Example:
//
//	for k, v := range barSeq2.String(func(str string) bool { return strings.Contains(str, "foo") })
func (s BarSeq2[T]) StringMatches(matcher func(string) bool) BarSeq2[T] {
	return func(yield func(T, Bar) bool) {
		for k, v := range s {
			if matcher(v.String) && !yield(k, v) {
				break
			}
		}
	}
}
